# eCos saved configuration

# ---- commands --------------------------------------------------------
# This section contains information about the savefile format.
# It should not be edited. Any modifications made to this section
# may make it impossible for the configuration tools to read
# the savefile.

cdl_savefile_version 1;
cdl_savefile_command cdl_savefile_version {};
cdl_savefile_command cdl_savefile_command {};
cdl_savefile_command cdl_configuration { description hardware template package };
cdl_savefile_command cdl_package { value_source user_value wizard_value inferred_value };
cdl_savefile_command cdl_component { value_source user_value wizard_value inferred_value };
cdl_savefile_command cdl_option { value_source user_value wizard_value inferred_value };
cdl_savefile_command cdl_interface { value_source user_value wizard_value inferred_value };

# ---- toplevel --------------------------------------------------------
# This section defines the toplevel configuration object. The only
# values that can be changed are the name of the configuration and
# the description field. It is not possible to modify the target,
# the template or the set of packages simply by editing the lines
# below because these changes have wide-ranging effects. Instead
# the appropriate tools should be used to make such modifications.

cdl_configuration eCos {
    description "" ;

    # These fields should not be modified.
    hardware    dharma ;
    template    default ;
    package -template CYGPKG_HAL current ;
    package -template CYGPKG_INFRA current ;
    package -template CYGPKG_KERNEL current ;
    package -template CYGPKG_MEMALLOC current ;
    package -hardware CYGPKG_HAL_ARM current ;
    package -hardware CYGPKG_HAL_ARM_EDB7XXX current ;
    package -hardware CYGPKG_IO_SERIAL_ARM_EDB7XXX current ;
    package CYGPKG_IO current ;
    package CYGPKG_ERROR current ;
};

# ---- conflicts -------------------------------------------------------
# There are 2 conflicts.
#
# option CYGNUM_HAL_COMMON_INTERRUPTS_STACK_SIZE
#   Property LegalValues
#   Illegal current value 640
#   Legal values are: 1024 to 1048576
#
# package CYGPKG_ERROR
#   Property Requires
#   "requires" constraint not satisfied:  CYGBLD_ISO_ERRNO_CODES_HEADER == "<cyg/error/codes.h>" 


# ---- contents --------------------------------------------------------
# >
# >
# Global build options
# Global build options including control over
# compiler flags, linker flags and choice of toolchain.
#
cdl_component CYGBLD_GLOBAL_OPTIONS {
    # There is no associated value.

    # The following properties are affected by this value
};

# >
# Global command prefix
# This option specifies the command prefix used when
# invoking the build tools.
#
cdl_option CYGBLD_GLOBAL_COMMAND_PREFIX {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value arm-elf
    # value_source default
    # Default value: arm-elf
};

# Global compiler flags
# This option controls the global compiler flags which are used to
# compile all packages by default. Individual packages may define
# options which override these global flags.
#
cdl_option CYGBLD_GLOBAL_CFLAGS {
    # Flavor: data
    user_value "-mcpu=arm7tdmi -Wall -Wpointer-arith -Wstrict-prototypes -Winline -Wundef -Woverloaded-virtual -g -O2 -ffunction-sections -fdata-sections -fno-rtti -fno-exceptions -fvtable-gc -finit-priority -D__DHARMA -D__WINJAM -D__DHARMA16BIT"
    # value_source user
    # Default value:  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ? "-mcpu=arm710c -Wall -Wpointer-arith -Wstrict-prototypes -Winline -Wundef -Woverloaded-virtual -g -O2 -ffunction-sections -fdata-sections -fno-rtti -fno-exceptions -fvtable-gc -finit-priority" :  "-mcpu=arm7tdmi -Wall -Wpointer-arith -Wstrict-prototypes -Winline -Wundef -Woverloaded-virtual -g -O2 -ffunction-sections -fdata-sections -fno-rtti -fno-exceptions -fvtable-gc -finit-priority" 
    #     CYGHWR_HAL_ARM_EDB7XXX_VARIANT == EP7212
    #   --> "-mcpu=arm7tdmi -Wall -Wpointer-arith -Wstrict-prototypes -Winline -Wundef -Woverloaded-virtual -g -O2 -ffunction-sections -fdata-sections -fno-rtti -fno-exceptions -fvtable-gc -finit-priority"
};

# Global linker flags
# This option controls the global linker flags. Individual
# packages may define options which override these global flags.
#
cdl_option CYGBLD_GLOBAL_LDFLAGS {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value "-mcpu=arm7tdmi -Wl,--gc-sections -Wl,-static -g -nostdlib"
    # value_source default
    # Default value:  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ? "-mcpu=arm710c -Wl,--gc-sections -Wl,-static -g -nostdlib" : "-mcpu=arm7tdmi -Wl,--gc-sections -Wl,-static -g -nostdlib"
    #     CYGHWR_HAL_ARM_EDB7XXX_VARIANT == EP7212
    #   --> "-mcpu=arm7tdmi -Wl,--gc-sections -Wl,-static -g -nostdlib"
};

# Build GDB stub ROM image
# This option enables the building of the GDB stubs for the
# board. The common HAL controls takes care of most of the
# build process, but the final conversion from ELF image to
# binary data is handled by the platform CDL, allowing
# relocation of the data if necessary.
#
cdl_option CYGBLD_BUILD_GDB_STUBS {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires:  CYG_HAL_STARTUP == "ROM" 
    #     CYG_HAL_STARTUP == ROM
    #   --> 1
    # Requires: CYGSEM_HAL_ROM_MONITOR
    #     CYGSEM_HAL_ROM_MONITOR == 0
    #   --> 0
    # Requires: CYGBLD_BUILD_COMMON_GDB_STUBS
    #     CYGBLD_BUILD_COMMON_GDB_STUBS == 0
    #   --> 0
    # Requires: CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    #     CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS == 0
    #   --> 0
    # Requires: CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT
    #     CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT == 0
    #   --> 0
    # Requires: CYGDBG_HAL_DEBUG_GDB_THREAD_SUPPORT
    #     CYGDBG_HAL_DEBUG_GDB_THREAD_SUPPORT == 0
    #   --> 0
    # Requires: ! CYGDBG_HAL_COMMON_INTERRUPTS_SAVE_MINIMUM_CONTEXT
    #     CYGDBG_HAL_COMMON_INTERRUPTS_SAVE_MINIMUM_CONTEXT == 1
    #   --> 0
    # Requires: ! CYGDBG_HAL_COMMON_CONTEXT_SAVE_MINIMUM
    #     CYGDBG_HAL_COMMON_CONTEXT_SAVE_MINIMUM == 1
    #   --> 0
};

# Build flash programming tool
# This option enables the building of the flash programming tool for copying the GDB stubs into flash memory.
#
cdl_option CYGBLD_BUILD_FLASH_TOOL {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires:  CYG_HAL_STARTUP == "RAM" 
    #     CYG_HAL_STARTUP == ROM
    #   --> 0
    # Requires: CYGPKG_LIBC
    #     CYGPKG_LIBC (unknown) == 0
    #   --> 0
    # Requires: CYGPKG_KERNEL
    #     CYGPKG_KERNEL == current
    #   --> 1
};

# Build tests for auxiliaries
# This option enables the building of some tests for the
# auxiliary devices.
#
cdl_option CYGBLD_BUILD_AUX_TESTS {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires:  CYG_HAL_STARTUP == "RAM" 
    #     CYG_HAL_STARTUP == ROM
    #   --> 0
    # Requires: CYGPKG_LIBC
    #     CYGPKG_LIBC (unknown) == 0
    #   --> 0
    # Requires: CYGPKG_KERNEL
    #     CYGPKG_KERNEL == current
    #   --> 1
};

# Build common GDB stub ROM image
# Unless a target board has specific requirements to the
# stub implementation, it can use a simple common stub.
# This option, which gets enabled by platform HALs as
# appropriate, controls the building of the common stub.
#
cdl_option CYGBLD_BUILD_COMMON_GDB_STUBS {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires: CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    #     CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS == 0
    #   --> 0

    # The following properties are affected by this value
    # option CYGBLD_BUILD_GDB_STUBS
    #     Requires: CYGBLD_BUILD_COMMON_GDB_STUBS
};

# <
# CygMon HAL options
# This option lists the target's requirements for a valid CygMon
# configuration.
#
cdl_component CYGPKG_CYGMON_HAL_OPTIONS {
    # This option is not active
    # ActiveIf constraint: CYGPKG_CYGMON
    #     CYGPKG_CYGMON (unknown) == 0
    #   --> 0

    # There is no associated value.
    # Requires: CYGPKG_IO_SERIAL_ARM_EDB7XXX
    #     CYGPKG_IO_SERIAL_ARM_EDB7XXX == 0
    #   --> 0
    # Requires: (CYGDAT_CYGMON_CONSOLE_DEV != "\"/dev/ser1\"") ||  (CYGPKG_IO_SERIAL_ARM_EDB7XXX_SERIAL1)
    #     CYGDAT_CYGMON_CONSOLE_DEV == 0
    #     CYGPKG_IO_SERIAL_ARM_EDB7XXX_SERIAL1 == 0
    #   --> 1
    # Requires: (CYGDAT_CYGMON_CONSOLE_DEV != "\"/dev/ser2\"") ||  (CYGPKG_IO_SERIAL_ARM_EDB7XXX_SERIAL2)
    #     CYGDAT_CYGMON_CONSOLE_DEV == 0
    #     CYGPKG_IO_SERIAL_ARM_EDB7XXX_SERIAL2 == 0
    #   --> 1
};

# >
# Serial port for default console
# This option selects the physical device to use as the default
# console device for CygMon.
#
cdl_option CYGDAT_CYGMON_CONSOLE_DEV {
    # This option is not active
    # The parent CYGPKG_CYGMON_HAL_OPTIONS is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value "\"/dev/ser1\""
    # value_source default
    # Default value: "\"/dev/ser1\""

    # The following properties are affected by this value
    # component CYGPKG_CYGMON_HAL_OPTIONS
    #     Requires: (CYGDAT_CYGMON_CONSOLE_DEV != "\"/dev/ser1\"") ||  (CYGPKG_IO_SERIAL_ARM_EDB7XXX_SERIAL1)
    # component CYGPKG_CYGMON_HAL_OPTIONS
    #     Requires: (CYGDAT_CYGMON_CONSOLE_DEV != "\"/dev/ser2\"") ||  (CYGPKG_IO_SERIAL_ARM_EDB7XXX_SERIAL2)
};

# Build CygMon ROM binary image
# This option enables the conversion of the CygMon ELF
# image to a binary image suitable for ROM programming.
#
cdl_option CYGBLD_BUILD_CYGMON_BIN {
    # This option is not active
    # The parent CYGPKG_CYGMON_HAL_OPTIONS is not active
    # ActiveIf constraint: CYGBLD_BUILD_CYGMON
    #     CYGBLD_BUILD_CYGMON (unknown) == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# Redboot HAL options
# This option lists the target's requirements for a valid Redboot
# configuration.
#
cdl_component CYGPKG_REDBOOT_HAL_OPTIONS {
    # This option is not active
    # ActiveIf constraint: CYGPKG_REDBOOT
    #     CYGPKG_REDBOOT (unknown) == 0
    #   --> 0

    # There is no associated value.
};

# >
# Build Redboot ROM binary image
# This option enables the conversion of the Redboot ELF
# image to a binary image suitable for ROM programming.
#
cdl_option CYGBLD_BUILD_REDBOOT_BIN {
    # This option is not active
    # The parent CYGPKG_REDBOOT_HAL_OPTIONS is not active
    # ActiveIf constraint: CYGBLD_BUILD_REDBOOT
    #     CYGBLD_BUILD_REDBOOT (unknown) == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# ARM EDB7XXX serial device drivers
# doc: redirect/ecos-device-drivers.html
# This option enables the serial device drivers for the
# Cirrus Logic EDB7XXX.
#
cdl_package CYGPKG_IO_SERIAL_ARM_EDB7XXX {
    # Packages cannot be added or removed, nor can their version be changed,
    # simply by editing their value. Instead the appropriate configuration
    # should be used to perform these actions.

    # This option is not active
    # ActiveIf constraint: CYGPKG_IO_SERIAL
    #     CYGPKG_IO_SERIAL (unknown) == 0
    #   --> 0
    # ActiveIf constraint: CYGPKG_HAL_ARM_EDB7XXX
    #     CYGPKG_HAL_ARM_EDB7XXX == current
    #   --> 1

    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 current
    # Requires: CYGPKG_ERROR
    #     CYGPKG_ERROR == current
    #   --> 1

    # The following properties are affected by this value
    # component CYGPKG_CYGMON_HAL_OPTIONS
    #     Requires: CYGPKG_IO_SERIAL_ARM_EDB7XXX
};

# >
# Cirrus Logic EDB7XXX serial port 1 driver
# This option includes the serial device driver for the Cirrus Logic EDB7XXX
# port 1.
#
cdl_component CYGPKG_IO_SERIAL_ARM_EDB7XXX_SERIAL1 {
    # This option is not active
    # The parent CYGPKG_IO_SERIAL_ARM_EDB7XXX is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # component CYGPKG_IO_SERIAL_ARM_EDB7XXX_TESTING
    #     ActiveIf: CYGPKG_IO_SERIAL_ARM_EDB7XXX_SERIAL1
    # component CYGPKG_CYGMON_HAL_OPTIONS
    #     Requires: (CYGDAT_CYGMON_CONSOLE_DEV != "\"/dev/ser1\"") ||  (CYGPKG_IO_SERIAL_ARM_EDB7XXX_SERIAL1)
};

# >
# Device name for the Cirrus Logic EDB7XXX serial port 1 driver
# This option specifies the name of serial device for the ARM 
# EDB7XXX port 1.
#
cdl_option CYGDAT_IO_SERIAL_ARM_EDB7XXX_SERIAL1_NAME {
    # This option is not active
    # The parent CYGPKG_IO_SERIAL_ARM_EDB7XXX_SERIAL1 is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value "\"/dev/ser1\""
    # value_source default
    # Default value: "\"/dev/ser1\""

    # The following properties are affected by this value
    # option CYGPRI_SER_TEST_SER_DEV
    #     DefaultValue:  CYGDAT_IO_SERIAL_ARM_EDB7XXX_SERIAL1_NAME 
};

# Baud rate for the Cirrus Logic EDB7XXX serial port 1 driver
# This option specifies the default baud rate (speed) for the ARM
# EDB7XXX port 1.
#
cdl_option CYGNUM_IO_SERIAL_ARM_EDB7XXX_SERIAL1_BAUD {
    # This option is not active
    # The parent CYGPKG_IO_SERIAL_ARM_EDB7XXX_SERIAL1 is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 38400
    # value_source default
    # Default value: 38400
    # Legal values:  50 75 110 "134_5" 150 200 300 600 1200 1800 2400 3600
    #                           4800 7200 9600 14400 19200 38400 57600 115200 234000
    #             
};

# Buffer size for the Cirrus Logic EDB7XXX serial port 1 driver
# This option specifies the size of the internal buffers used 
# for the Cirrus Logic EDB7XXX port 1.
#
cdl_option CYGNUM_IO_SERIAL_ARM_EDB7XXX_SERIAL1_BUFSIZE {
    # This option is not active
    # The parent CYGPKG_IO_SERIAL_ARM_EDB7XXX_SERIAL1 is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 128
    # value_source default
    # Default value: 128
    # Legal values: 0 to 8192
};

# <
# Cirrus Logic EDB7XXX serial port 2 driver
# This option includes the serial device driver for the ARM 
# EDB7XXX port 2.
#
cdl_component CYGPKG_IO_SERIAL_ARM_EDB7XXX_SERIAL2 {
    # This option is not active
    # The parent CYGPKG_IO_SERIAL_ARM_EDB7XXX is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # component CYGPKG_CYGMON_HAL_OPTIONS
    #     Requires: (CYGDAT_CYGMON_CONSOLE_DEV != "\"/dev/ser2\"") ||  (CYGPKG_IO_SERIAL_ARM_EDB7XXX_SERIAL2)
};

# >
# Device name for the Cirrus Logic EDB7XXX serial port 2 driver
# This option specifies the name of serial device for the ARM 
# EDB7XXX port 2.
#
cdl_option CYGDAT_IO_SERIAL_ARM_EDB7XXX_SERIAL2_NAME {
    # This option is not active
    # The parent CYGPKG_IO_SERIAL_ARM_EDB7XXX_SERIAL2 is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value "\"/dev/ser2\""
    # value_source default
    # Default value: "\"/dev/ser2\""
};

# Baud rate for the Cirrus Logic EDB7XXX serial port 2 driver
# This option specifies the default baud rate (speed) for the 
# Cirrus Logic EDB7XXX port 2.
#
cdl_option CYGNUM_IO_SERIAL_ARM_EDB7XXX_SERIAL2_BAUD {
    # This option is not active
    # The parent CYGPKG_IO_SERIAL_ARM_EDB7XXX_SERIAL2 is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 38400
    # value_source default
    # Default value: 38400
    # Legal values:  50 75 110 "134_5" 150 200 300 600 1200 1800 2400 3600
    #                           4800 7200 9600 14400 19200 38400 57600 115200 234000
    #             
};

# Buffer size for the Cirrus Logic EDB7XXX serial port 2 driver
# This option specifies the size of the internal buffers used for
# the Cirrus Logic EDB7XXX port 2.
#
cdl_option CYGNUM_IO_SERIAL_ARM_EDB7XXX_SERIAL2_BUFSIZE {
    # This option is not active
    # The parent CYGPKG_IO_SERIAL_ARM_EDB7XXX_SERIAL2 is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 128
    # value_source default
    # Default value: 128
    # Legal values: 0 to 8192
};

# <
# Serial device driver build options
# Package specific build options including control over
# compiler flags used only in building this package,
# and details of which tests are built.
#
cdl_component CYGPKG_IO_SERIAL_ARM_EDB7XXX_OPTIONS {
    # This option is not active
    # The parent CYGPKG_IO_SERIAL_ARM_EDB7XXX is not active

    # There is no associated value.
};

# >
# Additional compiler flags
# This option modifies the set of compiler flags for
# building these serial device drivers. These flags are used in addition
# to the set of global flags.
#
cdl_option CYGPKG_IO_SERIAL_ARM_EDB7XXX_CFLAGS_ADD {
    # This option is not active
    # The parent CYGPKG_IO_SERIAL_ARM_EDB7XXX_OPTIONS is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# Suppressed compiler flags
# This option modifies the set of compiler flags for
# building these serial device drivers. These flags are removed from
# the set of global flags if present.
#
cdl_option CYGPKG_IO_SERIAL_ARM_EDB7XXX_CFLAGS_REMOVE {
    # This option is not active
    # The parent CYGPKG_IO_SERIAL_ARM_EDB7XXX_OPTIONS is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# <
# Testing parameters
#
cdl_component CYGPKG_IO_SERIAL_ARM_EDB7XXX_TESTING {
    # This option is not active
    # The parent CYGPKG_IO_SERIAL_ARM_EDB7XXX is not active
    # ActiveIf constraint: CYGPKG_IO_SERIAL_ARM_EDB7XXX_SERIAL1
    #     CYGPKG_IO_SERIAL_ARM_EDB7XXX_SERIAL1 == 0
    #   --> 0

    # Calculated value: 1
    # Flavor: bool
    # Current value: 1
};

# >
# Serial device used for testing
#
cdl_option CYGPRI_SER_TEST_SER_DEV {
    # This option is not active
    # The parent CYGPKG_IO_SERIAL_ARM_EDB7XXX_TESTING is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value:  CYGDAT_IO_SERIAL_ARM_EDB7XXX_SERIAL1_NAME 
    #     CYGDAT_IO_SERIAL_ARM_EDB7XXX_SERIAL1_NAME == 0
    #   --> 0
};

# <
# <
# <
# eCos HAL
# doc: redirect/the-ecos-hardware-abstraction-layer-hal.html
# The eCos HAL package provide a porting layer for
# higher-level parts of the system such as the kernel and the
# C library. Each installation should have HAL packages for
# one or more architectures, and for each architecture there
# may be one or more supported platforms. It is necessary to
# select one target architecture and one platform for that
# architecture. There are also a number of configuration
# options that are common to all HAL packages.
#
cdl_package CYGPKG_HAL {
    # Packages cannot be added or removed, nor can their version be changed,
    # simply by editing their value. Instead the appropriate configuration
    # should be used to perform these actions.

    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 current

    # The following properties are affected by this value
};

# >
# Platform-independent HAL options
# A number of configuration options are common to most or all
# HAL packages, for example options controlling how much state
# should be saved during a context switch. The implementations
# of these options will vary from architecture to architecture.
#
cdl_component CYGPKG_HAL_COMMON {
    # There is no associated value.
};

# >
# Provide eCos kernel support
# The HAL can be configured to either support the full eCos
# kernel, or to support only very simple applications which do
# not require a full kernel. If kernel support is not required
# then some of the startup, exception, and interrupt handling
# code can be eliminated.
#
cdl_option CYGFUN_HAL_COMMON_KERNEL_SUPPORT {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: CYGPKG_KERNEL
    #     CYGPKG_KERNEL == current
    #   --> 1
    # Requires: CYGPKG_KERNEL
    #     CYGPKG_KERNEL == current
    #   --> 1
};

# HAL exception support
# When a processor exception occurs, for example an attempt to
# execute an illegal instruction or to perform a divide by
# zero, this exception may be handled in a number of different
# ways. If the target system has gdb support then typically
# the exception will be handled by gdb code. Otherwise if the
# HAL exception support is enabled then the HAL will invoke a
# routine deliver_exception(). Typically this routine will be
# provided by the eCos kernel, but it is possible for
# application code to provide its own implementation. If the
# HAL exception support is not enabled and a processor
# exception occurs then the behaviour of the system is
# undefined.
#
cdl_option CYGPKG_HAL_EXCEPTIONS {
    # Flavor: bool
    user_value 0
    # value_source user
    # Default value: CYGPKG_KERNEL_EXCEPTIONS
    #     CYGPKG_KERNEL_EXCEPTIONS == 0
    #   --> 0
    # Requires: CYGPKG_KERNEL_EXCEPTIONS
    #     CYGPKG_KERNEL_EXCEPTIONS == 0
    #   --> 0

    # The following properties are affected by this value
    # component CYGPKG_KERNEL_EXCEPTIONS
    #     Requires: CYGPKG_HAL_EXCEPTIONS
};

# Stop calling constructors early
# This option supports environments where some constructors
# must be run in the context of a thread rather than at
# simple system startup time. A boolean flag named
# cyg_hal_stop_constructors is set to 1 when constructors
# should no longer be invoked. It is up to some other
# package to deal with the rest of the constructors.
# In the current version this is only possible with the
# C library.
#
cdl_option CYGSEM_HAL_STOP_CONSTRUCTORS_ON_FLAG {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires: CYGSEM_LIBC_INVOKE_DEFAULT_STATIC_CONSTRUCTORS
    #     CYGSEM_LIBC_INVOKE_DEFAULT_STATIC_CONSTRUCTORS (unknown) == 0
    #   --> 0
};

# Install MMU tables.
# This option controls whether this application installs
# its own Memory Management Unit (MMU) tables, or relies on the
# existing environment to run.
#
cdl_option CYGSEM_HAL_INSTALL_MMU_TABLES {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # option CYGSEM_HAL_STATIC_MMU_TABLES
    #     Requires: CYGSEM_HAL_INSTALL_MMU_TABLES
};

# Use static MMU tables.
# This option defines an environment where any Memory
# Management Unit (MMU) tables are constant.  Normally used by ROM
# based environments, this provides a way to save RAM usage which
# would otherwise be required for these tables.
#
cdl_option CYGSEM_HAL_STATIC_MMU_TABLES {
    # Flavor: bool
    user_value 1
    # value_source user
    # Default value: 0
    # Requires: CYGSEM_HAL_INSTALL_MMU_TABLES
    #     CYGSEM_HAL_INSTALL_MMU_TABLES == 1
    #   --> 1
};

# Route diagnostic output to debug channel
# If not inheriting the console setup from the ROM monitor,
# it is possible to redirect diagnostic output to the debug
# channel by enabling this option. Depending on the debugger
# used it may also be necessary to select a mangler for the
# output to be displayed by the debugger.
#
cdl_component CYGDBG_HAL_DIAG_TO_DEBUG_CHAN {
    # ActiveIf constraint: !CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE
    #     CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE == 0
    #   --> 1
    # ActiveIf constraint:  CYGPKG_HAL_ARM || CYGPKG_HAL_POWERPC_MPC8xx  || CYGPKG_HAL_V85X_V850 || CYGSEM_HAL_VIRTUAL_VECTOR_DIAG 
    #     CYGPKG_HAL_ARM == current
    #     CYGPKG_HAL_POWERPC_MPC8xx (unknown) == 0
    #     CYGPKG_HAL_V85X_V850 (unknown) == 0
    #     CYGSEM_HAL_VIRTUAL_VECTOR_DIAG == 1
    #   --> 1

    # Flavor: bool
    user_value 0
    # value_source user
    # Default value:  (CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS  || CYG_HAL_STARTUP == "RAM") ? 1 : 0
    #     CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS == 0
    #     CYG_HAL_STARTUP == ROM
    #   --> 0

    # The following properties are affected by this value
    # option CYGPRI_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL_CONFIGURABLE
    #     Calculated:  !CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE  && !CYGDBG_HAL_DIAG_TO_DEBUG_CHAN 
};

# >
# Mangler used on diag output
# It is sometimes necessary to mangle (encode) the
# diag ASCII text output in order for it to show up at the
# other end. In particular, GDB may silently ignore raw
# ASCII text.
#
cdl_option CYGSEM_HAL_DIAG_MANGLER {
    # This option is not active
    # The parent CYGDBG_HAL_DIAG_TO_DEBUG_CHAN is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value GDB
    # value_source default
    # Default value: GDB
    # Legal values: "GDB" "None"
};

# <
# <
# HAL interrupt handling
# A number of configuration options related to interrupt
# handling are common to most or all HAL packages, even though
# the implementations will vary from architecture to
# architecture.
#
cdl_component CYGPKG_HAL_COMMON_INTERRUPTS {
    # There is no associated value.
};

# >
# Use separate stack for interrupts
# When an interrupt occurs this interrupt can be handled either
# on the current stack or on a separate stack maintained by the
# HAL. Using a separate stack requires a small number of extra
# instructions in the interrupt handling code, but it has the
# advantage that it is no longer necessary to allow extra space
# in every thread stack for the interrupt handlers. The amount
# of extra space required depends on the interrupt handlers
# that are being used.
#
cdl_option CYGIMP_HAL_COMMON_INTERRUPTS_USE_INTERRUPT_STACK {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Interrupt stack size
# This configuration option specifies the stack size in bytes
# for the interrupt stack. Typically this should be a multiple
# of 16, but the exact requirements will vary from architecture
# to architecture. The interrupt stack serves two separate
# purposes. It is used as the stack during system
# initialization. In addition, if the interrupt system is
# configured to use a separate stack then all interrupts will
# be processed on this stack. The exact memory requirements
# will vary from application to application, and will depend
# heavily on whether or not other interrupt-related options,
# for example nested interrupts, are enabled.
#
cdl_option CYGNUM_HAL_COMMON_INTERRUPTS_STACK_SIZE {
    # Flavor: data
    user_value 640
    # value_source user
    # Default value: 4096
    # Legal values: 1024 to 1048576
};

# Allow nested interrupts
# When an interrupt occurs the HAL interrupt handling code can
# either leave interrupts disabled for the duration of the
# interrupt handling code, or by doing some extra work it can
# reenable interrupts before invoking the interrupt handler and
# thus allow nested interrupts to happen. If all the interrupt
# handlers being used are small and do not involve any loops
# then it is usually better to disallow nested interrupts.
# However if any of the interrupt handlers are more complicated
# than nested interrupts will usually be required.
#
cdl_option CYGSEM_HAL_COMMON_INTERRUPTS_ALLOW_NESTING {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Save minimum context on interrupt
# The HAL interrupt handling code can exploit the calling conventions
# defined for a given architecture to reduce the amount of state
# that has to be saved. Generally this improves performance and
# reduces code size. However it can make source-level debugging
# more difficult.
#
cdl_option CYGDBG_HAL_COMMON_INTERRUPTS_SAVE_MINIMUM_CONTEXT {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # option CYGBLD_BUILD_GDB_STUBS
    #     Requires: ! CYGDBG_HAL_COMMON_INTERRUPTS_SAVE_MINIMUM_CONTEXT
};

# Chain all interrupts together
# Interrupts can be attached to vectors either singly, or be
# chained together. The latter is necessary if there is no way
# of discovering which device has interrupted without
# inspecting the device itself. It can also reduce the amount
# of RAM needed for interrupt decoding tables and code.
#
cdl_option CYGIMP_HAL_COMMON_INTERRUPTS_CHAIN {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0

    # The following properties are affected by this value
    # option CYGIMP_KERNEL_INTERRUPTS_CHAIN
    #     Requires: CYGIMP_HAL_COMMON_INTERRUPTS_CHAIN
};

# Ignore spurious [fleeting] interrupts
# On some hardware, interrupt sources may not be de-bounced or
# de-glitched.  Rather than try to handle these interrupts (no
# handling may be possible), this option allows the HAL to simply
# ignore them.  In most cases, if the interrupt is real it will
# reoccur in a detectable form.
#
cdl_option CYGIMP_HAL_COMMON_INTERRUPTS_IGNORE_SPURIOUS {
    # Flavor: bool
    user_value 1
    # value_source user
    # Default value: 0
};

# <
# HAL context switch support
# A number of configuration options related to thread contexts
# are common to most or all HAL packages, even though the
# implementations will vary from architecture to architecture.
#
cdl_component CYGPKG_HAL_COMMON_CONTEXT {
    # There is no associated value.

    # The following properties are affected by this value
};

# >
# Use minimum thread context
# The thread context switch code can exploit the calling
# conventions defined for a given architecture to reduce the
# amount of state that has to be saved during a context
# switch. Generally this improves performance and reduces
# code size. However it can make source-level debugging more
# difficult.
#
cdl_option CYGDBG_HAL_COMMON_CONTEXT_SAVE_MINIMUM {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # option CYGBLD_BUILD_GDB_STUBS
    #     Requires: ! CYGDBG_HAL_COMMON_CONTEXT_SAVE_MINIMUM
};

# <
# Source-level debugging support
# If the source level debugger gdb is to be used for debugging
# application code then it may be necessary to configure in support
# for this in the HAL.
#
cdl_component CYGPKG_HAL_DEBUG {
    # There is no associated value.
};

# >
# Support for GDB stubs
# The HAL implements GDB stubs for the target.
#
cdl_interface CYGINT_HAL_DEBUG_GDB_STUBS {
    # Implemented by CYGPKG_HAL_ARM_EDB7XXX, active, enabled
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 1

    # The following properties are affected by this value
    # option CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    #     ActiveIf: CYGINT_HAL_DEBUG_GDB_STUBS
};

# Include GDB stubs in HAL
# This option causes a set of GDB stubs to be included into the
# system. On some target systems the GDB support will be
# provided by other means, for example by a ROM monitor. On
# other targets, especially when building a ROM-booting system,
# the necessary support has to go into the target library
# itself. When GDB stubs are include in a configuration, HAL
# serial drivers must also be included.
#
cdl_option CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS {
    # ActiveIf constraint: CYGINT_HAL_DEBUG_GDB_STUBS
    #     CYGINT_HAL_DEBUG_GDB_STUBS == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires: ! CYGSEM_HAL_USE_ROM_MONITOR
    #     CYGSEM_HAL_USE_ROM_MONITOR == 0
    #   --> 1
    # Requires:  !CYGSEM_HAL_VIRTUAL_VECTOR_DIAG  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS 
    #     CYGSEM_HAL_VIRTUAL_VECTOR_DIAG == 1
    #     CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS == 1
    #   --> 1

    # The following properties are affected by this value
    # component CYGDBG_HAL_DIAG_TO_DEBUG_CHAN
    #     DefaultValue:  (CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS  || CYG_HAL_STARTUP == "RAM") ? 1 : 0
    # option CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT
    #     Requires: CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    # option CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT
    #     DefaultValue: CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    # option CYGDBG_HAL_DEBUG_GDB_CTRLC_SUPPORT
    #     ActiveIf:  CYGSEM_HAL_USE_ROM_MONITOR || CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS 
    # option CYGDBG_HAL_DEBUG_GDB_CTRLC_SUPPORT
    #     DefaultValue:  !CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS 
    # option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS
    #     DefaultValue:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS 
    # option CYGBLD_BUILD_COMMON_GDB_STUBS
    #     Requires: CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    # option CYGHWR_HAL_ARM_DUMP_EXCEPTIONS
    #     Requires: !CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    # option CYGBLD_BUILD_GDB_STUBS
    #     Requires: CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
};

# Support for external break support in GDB stubs
# The HAL implements external break (or asynchronous interrupt)
# in the GDB stubs for the target.
#
cdl_interface CYGINT_HAL_DEBUG_GDB_STUBS_BREAK {
    # Implemented by CYGPKG_HAL_ARM_EDB7XXX, active, enabled
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 1

    # The following properties are affected by this value
    # option CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT
    #     ActiveIf: CYGINT_HAL_DEBUG_GDB_STUBS_BREAK
};

# Include GDB external break support for stubs
# This option causes the GDB stub to add a serial interrupt handler
# which will listen for GDB break packets. This lets you stop the
# target asynchronously when using GDB, usually by hitting Control+C
# or pressing the STOP button. This option differs from
# CYGDBG_HAL_DEBUG_GDB_CTRLC_SUPPORT in that it is used when
# GDB stubs are present.
#
cdl_option CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT {
    # ActiveIf constraint: CYGINT_HAL_DEBUG_GDB_STUBS_BREAK
    #     CYGINT_HAL_DEBUG_GDB_STUBS_BREAK == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    #     CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS == 0
    #   --> 0
    # Requires: CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    #     CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS == 0
    #   --> 0

    # The following properties are affected by this value
    # option CYGDBG_HAL_DEBUG_GDB_CTRLC_SUPPORT
    #     Requires: !CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT
    # option CYGBLD_BUILD_GDB_STUBS
    #     Requires: CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT
};

# Platform does not support CTRLC
#
cdl_interface CYGINT_HAL_DEBUG_GDB_CTRLC_UNSUPPORTED {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0

    # The following properties are affected by this value
    # option CYGDBG_HAL_DEBUG_GDB_CTRLC_SUPPORT
    #     ActiveIf:  CYGINT_HAL_DEBUG_GDB_CTRLC_UNSUPPORTED == 0 
};

# Include GDB external break support when no stubs
# This option adds an interrupt handler for the GDB serial line
# which will listen for GDB break packets. This lets you stop the
# target asynchronously when using GDB, usually by hitting Control+C
# or pressing the STOP button. This option differs from
# CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT in that it is used when the GDB
# stubs are NOT present.
#
cdl_option CYGDBG_HAL_DEBUG_GDB_CTRLC_SUPPORT {
    # This option is not active
    # ActiveIf constraint:  CYGSEM_HAL_USE_ROM_MONITOR || CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS 
    #     CYGSEM_HAL_USE_ROM_MONITOR == 0
    #     CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS == 0
    #   --> 0
    # ActiveIf constraint:  CYGINT_HAL_DEBUG_GDB_CTRLC_UNSUPPORTED == 0 
    #     CYGINT_HAL_DEBUG_GDB_CTRLC_UNSUPPORTED == 0
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value:  !CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS 
    #     CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS == 0
    #   --> 1
    # Requires: !CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT
    #     CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT == 0
    #   --> 1
};

# Include GDB multi-threading debug support
# This option enables some extra HAL code which is needed
# to support multi-threaded source level debugging.
#
cdl_option CYGDBG_HAL_DEBUG_GDB_THREAD_SUPPORT {
    # This option is not active
    # ActiveIf constraint:  CYGSEM_HAL_ROM_MONITOR || CYGDBG_KERNEL_DEBUG_GDB_THREAD_SUPPORT 
    #     CYGSEM_HAL_ROM_MONITOR == 0
    #     CYGDBG_KERNEL_DEBUG_GDB_THREAD_SUPPORT == 0
    #   --> 0

    # Flavor: bool
    user_value 0
    # value_source user
    # Default value: 1

    # The following properties are affected by this value
    # option CYGDBG_KERNEL_DEBUG_GDB_THREAD_SUPPORT
    #     Requires: CYGDBG_HAL_DEBUG_GDB_THREAD_SUPPORT
    # option CYGBLD_BUILD_GDB_STUBS
    #     Requires: CYGDBG_HAL_DEBUG_GDB_THREAD_SUPPORT
};

# <
# ROM monitor support
# Support for ROM monitors can be built in to your application. 
# It may also be relevant to build your application as a ROM monitor
# itself. Such options are contained here if relevant for your chosen
# platform. The options and ROM monitors available to choose are
# platform-dependent.
#
cdl_component CYGPKG_HAL_ROM_MONITOR {
    # There is no associated value.

    # The following properties are affected by this value
};

# >
# Target has virtual vector support
#
cdl_interface CYGINT_HAL_VIRTUAL_VECTOR_SUPPORT {
    # Implemented by CYGPKG_HAL_ARM_EDB7XXX, active, enabled
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 1

    # The following properties are affected by this value
    # component CYGSEM_HAL_VIRTUAL_VECTOR_SUPPORT
    #     ActiveIf: CYGINT_HAL_VIRTUAL_VECTOR_SUPPORT
};

# The platform port was written with vector support
# Many platform HALs have adopted the virtual vector support
# after its introduction. On those platforms, old ROM
# monitors will not provide the necessary services - and
# so the use of these services should be disabled per default.
# Newer ports, however, guarantee to provide the necessary
# services in all ROM monitors, and so default to use the
# services.
#
cdl_interface CYGINT_HAL_VIRTUAL_VECTOR_SUPPORT_GUARANTEED {
    # Implemented by CYGPKG_HAL_ARM_EDB7XXX, active, enabled
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 1

    # The following properties are affected by this value
    # option CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE
    #     DefaultValue:  CYGINT_HAL_VIRTUAL_VECTOR_SUPPORT_GUARANTEED  && !CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS 
    # option CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE
    #     DefaultValue:  CYG_HAL_STARTUP != "RAM" || !CYGSEM_HAL_USE_ROM_MONITOR || !CYGINT_HAL_VIRTUAL_VECTOR_SUPPORT_GUARANTEED 
};

# Enable use of virtual vector calling interface
# Virtual vector support allows the HAL to let the ROM
# monitor handle certain operations. The virtual vector table
# defines a calling interface between applications running in
# RAM and the ROM monitor.
#
cdl_component CYGSEM_HAL_VIRTUAL_VECTOR_SUPPORT {
    # ActiveIf constraint: CYGINT_HAL_VIRTUAL_VECTOR_SUPPORT
    #     CYGINT_HAL_VIRTUAL_VECTOR_SUPPORT == 1
    #   --> 1

    # Calculated value: 1
    # Flavor: bool
    # Current value: 1
};

# >
# Inherit console settings from ROM monitor
# When this option is set, the application will inherit
# the console as set up by the ROM monitor. This means
# that the application will use whatever channel and
# mangling style was used by the ROM monitor when
# the application was launched.
#
cdl_option CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE {
    # This option is not active
    # ActiveIf constraint: CYGSEM_HAL_USE_ROM_MONITOR
    #     CYGSEM_HAL_USE_ROM_MONITOR == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value:  CYGINT_HAL_VIRTUAL_VECTOR_SUPPORT_GUARANTEED  && !CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS 
    #     CYGINT_HAL_VIRTUAL_VECTOR_SUPPORT_GUARANTEED == 1
    #     CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS == 1
    #   --> 0

    # The following properties are affected by this value
    # component CYGDBG_HAL_DIAG_TO_DEBUG_CHAN
    #     ActiveIf: !CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE
    # option CYGPRI_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL_CONFIGURABLE
    #     Calculated:  !CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE  && !CYGDBG_HAL_DIAG_TO_DEBUG_CHAN 
};

# Debug channel is configurable
# This option is a configuration hint - it is enabled
# when the HAL initialization code will make use
# of the debug channel configuration option.
#
cdl_option CYGPRI_HAL_VIRTUAL_VECTOR_DEBUG_CHANNEL_CONFIGURABLE {
    # Calculated value:  CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS 
    #     CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS == 1
    # Flavor: bool
    # Current value: 1

    # The following properties are affected by this value
    # option CYGNUM_HAL_VIRTUAL_VECTOR_DEBUG_CHANNEL
    #     ActiveIf: CYGPRI_HAL_VIRTUAL_VECTOR_DEBUG_CHANNEL_CONFIGURABLE
};

# Console channel is configurable
# This option is a configuration hint - it is enabled
# when the HAL initialization code will make use
# of the console channel configuration option.
#
cdl_option CYGPRI_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL_CONFIGURABLE {
    # Calculated value:  !CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE  && !CYGDBG_HAL_DIAG_TO_DEBUG_CHAN 
    #     CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE == 0
    #     CYGDBG_HAL_DIAG_TO_DEBUG_CHAN == 0
    # Flavor: bool
    # Current value: 1

    # The following properties are affected by this value
    # option CYGNUM_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL
    #     ActiveIf: CYGPRI_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL_CONFIGURABLE
};

# Initialize whole of virtual vector table
# This option will cause the whole of the virtual
# vector table to be initialized with dummy values on
# startup. When this option is enabled, all the
# options below must also be enabled - or the
# table would be empty when the application
# launches.
# On targets where older ROM monitors without
# virtual vector support may still be in use, it is
# necessary for RAM applictions to initialize the
# table (since all HAL diagnostics and debug IO
# happens via the table). The default setting of
# this option will see to this, but it is still
# possible to override the option when a target with
# a newer ROM monitor is used.
#
cdl_option CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value:  CYG_HAL_STARTUP != "RAM" || !CYGSEM_HAL_USE_ROM_MONITOR || !CYGINT_HAL_VIRTUAL_VECTOR_SUPPORT_GUARANTEED 
    #     CYG_HAL_STARTUP == ROM
    #     CYGSEM_HAL_USE_ROM_MONITOR == 0
    #     CYGINT_HAL_VIRTUAL_VECTOR_SUPPORT_GUARANTEED == 1
    #   --> 1
    # Requires: CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_ICTRL
    #     CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_ICTRL == 1
    #   --> 1
    # Requires: CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_RESET
    #     CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_RESET == 1
    #   --> 1
    # Requires: CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DELAY_US
    #     CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DELAY_US == 1
    #   --> 1
    # Requires: CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_CACHE
    #     CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_CACHE == 1
    #   --> 1
    # Requires: CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DATA
    #     CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DATA == 1
    #   --> 1
    # Requires: CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS
    #     CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS == 1
    #   --> 1

    # The following properties are affected by this value
    # option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT
    #     ActiveIf: !CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE
    # option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_ICTRL
    #     DefaultValue:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT 
    # option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_RESET
    #     DefaultValue:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT 
    # option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DELAY_US
    #     DefaultValue:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT 
    # option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_CACHE
    #     DefaultValue:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT 
    # option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DATA
    #     DefaultValue:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT 
    # option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS
    #     DefaultValue:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS 
};

# Claim virtual vector table entries by default
# By default most virtual vectors will be claimed by
# RAM startup configurations, meaning that the RAM
# application will provide the services. The
# exception is COMMS support (HAL
# diagnostics/debugging IO) which is left in the
# control of the ROM monitor.
# The reasoning behind this is to get as much of the
# code exercised during regular development so it
# is known to be working the few times a new ROM
# monitor or a ROM production configuration is used
# - COMMS are excluded only by necessity in order to
# avoid breaking an existing debugger connections
# (there may be ways around this).
# For production RAM configurations this option can
# be switched off, causing the appliction to rely on
# the ROM monitor for these services, thus
# saving some space.
# Individual vectors may also be left unclaimed,
# controlled by the below options (meaning that the
# associated service provided by the ROM monitor
# will be used).
#
cdl_option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT {
    # This option is not active
    # ActiveIf constraint: !CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE
    #     CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE == 1
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_ICTRL
    #     DefaultValue:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT 
    # option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_RESET
    #     DefaultValue:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT 
    # option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DELAY_US
    #     DefaultValue:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT 
    # option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_CACHE
    #     DefaultValue:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT 
    # option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DATA
    #     DefaultValue:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT 
};

# Claim ictrl/exc virtual vectors
# This option will cause the ictrl/exc virtual
# vectors to be claimed. These are pointers to
# the HAL interrupt handlers table and the HAL VSR
# table.
#
cdl_option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_ICTRL {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT 
    #     CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE == 1
    #     CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT == 0
    #   --> 1

    # The following properties are affected by this value
    # option CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE
    #     Requires: CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_ICTRL
};

# Claim reset virtual vectors
# This option will cause the reset and kill_by_reset
# virtual vectors to be claimed.
#
cdl_option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_RESET {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT 
    #     CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE == 1
    #     CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT == 0
    #   --> 1

    # The following properties are affected by this value
    # option CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE
    #     Requires: CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_RESET
};

# Claim delay_us virtual vector
# This option will cause the delay_us
# virtual vector to be claimed.
#
cdl_option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DELAY_US {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT 
    #     CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE == 1
    #     CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT == 0
    #   --> 1

    # The following properties are affected by this value
    # option CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE
    #     Requires: CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DELAY_US
};

# Claim cache virtual vectors
# This option will cause the cache virtual vectors
# to be claimed.
#
cdl_option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_CACHE {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT 
    #     CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE == 1
    #     CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT == 0
    #   --> 1

    # The following properties are affected by this value
    # option CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE
    #     Requires: CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_CACHE
};

# Claim data virtual vectors
# This option will cause the data virtual vectors
# to be claimed. These are (unused at present)
# pointers to CPU, board and debug information.
#
cdl_option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DATA {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT 
    #     CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE == 1
    #     CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT == 0
    #   --> 1

    # The following properties are affected by this value
    # option CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE
    #     Requires: CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DATA
};

# Claim comms virtual vectors
# This option will cause the communication tables
# that are part of the virtual vectors mechanism to
# be claimed. Note that doing this may cause an
# existing ROM monitor communication connection to
# be closed. For this reason, the option is disabled
# per default for normal application
# configurations.
#
cdl_option CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value:  CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE  || CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS 
    #     CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE == 1
    #     CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS == 0
    #   --> 1

    # The following properties are affected by this value
    # option CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    #     Requires:  !CYGSEM_HAL_VIRTUAL_VECTOR_DIAG  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS 
    # option CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE
    #     DefaultValue:  CYGINT_HAL_VIRTUAL_VECTOR_SUPPORT_GUARANTEED  && !CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS 
    # option CYGPRI_HAL_VIRTUAL_VECTOR_DEBUG_CHANNEL_CONFIGURABLE
    #     Calculated:  CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS 
    # option CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE
    #     Requires: CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS
};

# Do diagnostic IO via virtual vector table
# All HAL IO happens via the virtual vector table / comm
# tables when those tables are supported by the HAL.
# If so desired, the low-level IO functions can
# still be provided by the RAM application by
# enabling the CLAIM_COMMS option.
#
cdl_option CYGSEM_HAL_VIRTUAL_VECTOR_DIAG {
    # Calculated value: 1
    # Flavor: bool
    # Current value: 1

    # The following properties are affected by this value
    # component CYGDBG_HAL_DIAG_TO_DEBUG_CHAN
    #     ActiveIf:  CYGPKG_HAL_ARM || CYGPKG_HAL_POWERPC_MPC8xx  || CYGPKG_HAL_V85X_V850 || CYGSEM_HAL_VIRTUAL_VECTOR_DIAG 
    # option CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    #     Requires:  !CYGSEM_HAL_VIRTUAL_VECTOR_DIAG  || CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS 
};

# <
# Behave as a ROM monitor
# Enable this option if this program is to be used as a ROM monitor,
# i.e. applications will be loaded into RAM on the board, and this
# ROM monitor may process exceptions or interrupts generated from the
# application. This enables features such as utilizing a separate
# interrupt stack when exceptions are generated.
#
cdl_option CYGSEM_HAL_ROM_MONITOR {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires:  CYG_HAL_STARTUP == "ROM" 
    #     CYG_HAL_STARTUP == ROM
    #   --> 1

    # The following properties are affected by this value
    # option CYGBLD_BUILD_GDB_STUBS
    #     Requires: CYGSEM_HAL_ROM_MONITOR
    # option CYGDBG_HAL_DEBUG_GDB_THREAD_SUPPORT
    #     ActiveIf:  CYGSEM_HAL_ROM_MONITOR || CYGDBG_KERNEL_DEBUG_GDB_THREAD_SUPPORT 
};

# Work with a ROM monitor
# Support can be enabled for different varieties of ROM monitor.
# This support changes various eCos semantics such as the encoding
# of diagnostic output, or the overriding of hardware interrupt
# vectors.
# Firstly there is "Generic" support which prevents the HAL
# from overriding the hardware vectors that it does not use, to
# instead allow an installed ROM monitor to handle them. This is
# the most basic support which is likely to be common to most
# implementations of ROM monitor.
# "GDB_stubs" provides support when GDB stubs are included in
# the ROM monitor or boot ROM.
#
cdl_option CYGSEM_HAL_USE_ROM_MONITOR {
    # Flavor: booldata
    user_value 0 GDB_stubs
    # value_source user
    # Default value:  CYG_HAL_STARTUP == "RAM" ? "GDB_stubs" : 0 
    #     CYG_HAL_STARTUP == ROM
    #   --> 0 0
    # Legal values:  "Generic" "GDB_stubs" 
    # Requires:  CYG_HAL_STARTUP == "RAM" 
    #     CYG_HAL_STARTUP == ROM
    #   --> 0

    # The following properties are affected by this value
    # option CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    #     Requires: ! CYGSEM_HAL_USE_ROM_MONITOR
    # option CYGDBG_HAL_DEBUG_GDB_CTRLC_SUPPORT
    #     ActiveIf:  CYGSEM_HAL_USE_ROM_MONITOR || CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS 
    # option CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE
    #     ActiveIf: CYGSEM_HAL_USE_ROM_MONITOR
    # option CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE
    #     DefaultValue:  CYG_HAL_STARTUP != "RAM" || !CYGSEM_HAL_USE_ROM_MONITOR || !CYGINT_HAL_VIRTUAL_VECTOR_SUPPORT_GUARANTEED 
};

# <
# Common HAL tests
# This option specifies the set of tests for the common HAL.
#
cdl_option CYGPKG_HAL_TESTS {
    # Calculated value:  "tests/cache tests/context tests/intr" 
    # Flavor: data
    # Current_value: tests/cache tests/context tests/intr
};

# ARM architecture
# The ARM architecture HAL package provides generic
# support for this processor architecture. It is also
# necessary to select a specific target platform HAL
# package.
#
cdl_package CYGPKG_HAL_ARM {
    # Packages cannot be added or removed, nor can their version be changed,
    # simply by editing their value. Instead the appropriate configuration
    # should be used to perform these actions.

    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 current

    # The following properties are affected by this value
    # component CYGDBG_HAL_DIAG_TO_DEBUG_CHAN
    #     ActiveIf:  CYGPKG_HAL_ARM || CYGPKG_HAL_POWERPC_MPC8xx  || CYGPKG_HAL_V85X_V850 || CYGSEM_HAL_VIRTUAL_VECTOR_DIAG 
    # option CYGPKG_KERNEL_TESTS
    #     Calculated:  
    #                     CYGPKG_HAL_ARM_AEB ? "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/clock0 tests/clock1 tests/clockcnv tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kclock0 tests/kclock1 tests/kexcept1 tests/kintr0 tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/ksched1 tests/ksem0 tests/ksem1 tests/kflag0 tests/kflag1 tests/klock tests/kthread0 tests/kthread1 tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2 tests/release tests/kill tests/thread_gdb tests/tm_basic tests/dhrystone" :  CYGPKG_HAL_ARM_EBSA285 ? "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/clock0 tests/clock1 tests/clockcnv tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kclock0 tests/kclock1 tests/kexcept1 tests/kintr0 tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/ksched1 tests/ksem0 tests/ksem1 tests/kflag0 tests/kflag1 tests/klock tests/kthread0 tests/kthread1 tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2 tests/release tests/kill tests/thread_gdb tests/tm_basic tests/dhrystone tests/stress_threads tests/kcache1 tests/kcache2" :  CYGPKG_HAL_ARM_SA11X0 ? "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/clock0 tests/clock1 tests/clockcnv tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kclock0 tests/kclock1 tests/kexcept1 tests/kintr0 tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/ksched1 tests/ksem0 tests/ksem1 tests/kflag0 tests/kflag1 tests/klock tests/kthread0 tests/kthread1 tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2 tests/release tests/kill tests/thread_gdb tests/tm_basic tests/dhrystone tests/stress_threads tests/kcache1 tests/kcache2" :  CYGPKG_HAL_ARM_EDB7XXX ? "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/clock0 tests/clock1 tests/clockcnv tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kclock0 tests/kclock1 tests/kexcept1 tests/kintr0 tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/ksched1 tests/ksem0 tests/ksem1 tests/kflag0 tests/kflag1 tests/klock tests/kthread0 tests/kthread1 tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2 tests/release tests/kill tests/thread_gdb tests/tm_basic tests/dhrystone tests/stress_threads tests/kcache1 tests/kcache2" :  CYGPKG_HAL_ARM_CMA230 ? "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/clock0 tests/clock1 tests/clockcnv tests/cnt_sem0 tests/cnt_sem1 tests/flag0 tests/flag1 tests/intr0 tests/kclock0 tests/kclock1 tests/kintr0 tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/ksched1 tests/ksem0 tests/ksem1 tests/kflag0 tests/kflag1 tests/klock tests/kthread0 tests/kthread1 tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2 tests/release tests/kill tests/thread_gdb tests/tm_basic tests/dhrystone" :  CYGPKG_HAL_ARM ? "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/clock0 tests/clock1 tests/clockcnv tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kclock0 tests/kclock1 tests/kexcept1 tests/kintr0 tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/ksched1 tests/ksem0 tests/ksem1 tests/kflag0 tests/kflag1 tests/klock tests/kthread0 tests/kthread1 tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2 tests/release tests/kill tests/thread_gdb tests/tm_basic tests/dhrystone" :  "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/clock0 tests/clock1 tests/clockcnv tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kclock0 tests/kclock1 tests/kexcept1 tests/kintr0 tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/ksched1 tests/ksem0 tests/ksem1 tests/kflag0 tests/kflag1 tests/klock tests/kthread0 tests/kthread1 tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2 tests/release tests/kill tests/thread_gdb tests/tm_basic tests/dhrystone tests/stress_threads tests/kcache1 tests/kcache2" 
    #                 
};

# >
# Enable Thumb instruction set
# Enable use of the Thumb instruction set.
#
cdl_option CYGHWR_THUMB {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Use big-endian mode
# Use the CPU in big-endian mode.
#
cdl_option CYGHWR_HAL_ARM_BIGENDIAN {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# ARM CPU family
# It is possible to optimize code for either the ARM7 or
# ARM9 CPU family. This option selects which CPU to
# optimize for on boards that support both CPUs.
#
cdl_option CYGHWR_HAL_ARM_CPU_FAMILY {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ARM7
    # value_source default
    # Default value: ARM7
    # Legal values: "ARM7" "ARM9"
};

# Provide diagnostic dump for exceptions
# Print messages about hardware exceptions, including
# raw exception frame dump and register contents.
#
cdl_option CYGHWR_HAL_ARM_DUMP_EXCEPTIONS {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires: !CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS
    #     CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS == 0
    #   --> 1
};

# Process all exceptions with the eCos application
# Normal RAM-based programs which do not include GDB stubs 
# defer processing of the illegal instruction exception to GDB.
# Setting this options allows the program to explicitly handle
# the illegal instruction exception itself.  Note: this will
# prevent the use of GDB to debug the application as breakpoints
# will no longer work.
#
cdl_option CYGIMP_HAL_PROCESS_ALL_EXCEPTIONS {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Linker script
#
cdl_option CYGBLD_LINKER_SCRIPT {
    # Calculated value:  "src/arm.ld" 
    # Flavor: data
    # Current_value: src/arm.ld
};

# Implementations of hal_arm_mem_real_region_top()
#
cdl_interface CYGINT_HAL_ARM_MEM_REAL_REGION_TOP {
    # No options implement this inferface
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
};

# Cirrus Logic development board
# The EDB7XXX HAL package provides the support needed to run
# eCos on a Cirrus Logic development board.
#
cdl_package CYGPKG_HAL_ARM_EDB7XXX {
    # Packages cannot be added or removed, nor can their version be changed,
    # simply by editing their value. Instead the appropriate configuration
    # should be used to perform these actions.

    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 current

    # The following properties are affected by this value
    # option CYGPKG_KERNEL_TESTS
    #     Calculated:  
    #                     CYGPKG_HAL_ARM_AEB ? "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/clock0 tests/clock1 tests/clockcnv tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kclock0 tests/kclock1 tests/kexcept1 tests/kintr0 tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/ksched1 tests/ksem0 tests/ksem1 tests/kflag0 tests/kflag1 tests/klock tests/kthread0 tests/kthread1 tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2 tests/release tests/kill tests/thread_gdb tests/tm_basic tests/dhrystone" :  CYGPKG_HAL_ARM_EBSA285 ? "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/clock0 tests/clock1 tests/clockcnv tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kclock0 tests/kclock1 tests/kexcept1 tests/kintr0 tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/ksched1 tests/ksem0 tests/ksem1 tests/kflag0 tests/kflag1 tests/klock tests/kthread0 tests/kthread1 tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2 tests/release tests/kill tests/thread_gdb tests/tm_basic tests/dhrystone tests/stress_threads tests/kcache1 tests/kcache2" :  CYGPKG_HAL_ARM_SA11X0 ? "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/clock0 tests/clock1 tests/clockcnv tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kclock0 tests/kclock1 tests/kexcept1 tests/kintr0 tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/ksched1 tests/ksem0 tests/ksem1 tests/kflag0 tests/kflag1 tests/klock tests/kthread0 tests/kthread1 tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2 tests/release tests/kill tests/thread_gdb tests/tm_basic tests/dhrystone tests/stress_threads tests/kcache1 tests/kcache2" :  CYGPKG_HAL_ARM_EDB7XXX ? "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/clock0 tests/clock1 tests/clockcnv tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kclock0 tests/kclock1 tests/kexcept1 tests/kintr0 tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/ksched1 tests/ksem0 tests/ksem1 tests/kflag0 tests/kflag1 tests/klock tests/kthread0 tests/kthread1 tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2 tests/release tests/kill tests/thread_gdb tests/tm_basic tests/dhrystone tests/stress_threads tests/kcache1 tests/kcache2" :  CYGPKG_HAL_ARM_CMA230 ? "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/clock0 tests/clock1 tests/clockcnv tests/cnt_sem0 tests/cnt_sem1 tests/flag0 tests/flag1 tests/intr0 tests/kclock0 tests/kclock1 tests/kintr0 tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/ksched1 tests/ksem0 tests/ksem1 tests/kflag0 tests/kflag1 tests/klock tests/kthread0 tests/kthread1 tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2 tests/release tests/kill tests/thread_gdb tests/tm_basic tests/dhrystone" :  CYGPKG_HAL_ARM ? "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/clock0 tests/clock1 tests/clockcnv tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kclock0 tests/kclock1 tests/kexcept1 tests/kintr0 tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/ksched1 tests/ksem0 tests/ksem1 tests/kflag0 tests/kflag1 tests/klock tests/kthread0 tests/kthread1 tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2 tests/release tests/kill tests/thread_gdb tests/tm_basic tests/dhrystone" :  "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/clock0 tests/clock1 tests/clockcnv tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kclock0 tests/kclock1 tests/kexcept1 tests/kintr0 tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/ksched1 tests/ksem0 tests/ksem1 tests/kflag0 tests/kflag1 tests/klock tests/kthread0 tests/kthread1 tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2 tests/release tests/kill tests/thread_gdb tests/tm_basic tests/dhrystone tests/stress_threads tests/kcache1 tests/kcache2" 
    #                 
    # package CYGPKG_IO_SERIAL_ARM_EDB7XXX
    #     ActiveIf: CYGPKG_HAL_ARM_EDB7XXX
};

# >
# Cirrus Logic processor variant
# The Cirrus Logic processor variant.
#
cdl_option CYGHWR_HAL_ARM_EDB7XXX_VARIANT {
    # Flavor: data
    user_value EP7212
    # value_source user
    # Default value: EP7211
    # Legal values:  "CL_PS7111" "EP7209" "EP7211" "EP7212" 

    # The following properties are affected by this value
    # component CYG_HAL_STARTUP
    #     LegalValues:  "ROM"
    #                             ((CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209") ? "" : "RAM")
    #             
    # component CYG_HAL_STARTUP
    #     DefaultValue:  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ? "ROM" : "RAM"
    # option CYGHWR_HAL_ARM_EDB7XXX_PROCESSOR_CLOCK
    #     DefaultValue:  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ? 18432 : 73728 
    # option CYGHWR_HAL_ARM_EDB7XXX_DRAM_SIZE
    #     DefaultValue:  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ? 2 :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ? 0 : 16 
    # option CYGHWR_HAL_ARM_EDB7XXX_DRAM_SIZE
    #     DefaultValue:  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ? 2 :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ? 0 : 16 
    # option CYGBLD_GLOBAL_CFLAGS
    #     DefaultValue:  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ? "-mcpu=arm710c -Wall -Wpointer-arith -Wstrict-prototypes -Winline -Wundef -Woverloaded-virtual -g -O2 -ffunction-sections -fdata-sections -fno-rtti -fno-exceptions -fvtable-gc -finit-priority" :  "-mcpu=arm7tdmi -Wall -Wpointer-arith -Wstrict-prototypes -Winline -Wundef -Woverloaded-virtual -g -O2 -ffunction-sections -fdata-sections -fno-rtti -fno-exceptions -fvtable-gc -finit-priority" 
    # option CYGBLD_GLOBAL_LDFLAGS
    #     DefaultValue:  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ? "-mcpu=arm710c -Wl,--gc-sections -Wl,-static -g -nostdlib" : "-mcpu=arm7tdmi -Wl,--gc-sections -Wl,-static -g -nostdlib"
    # option CYGPKG_HAL_ARM_EDB7XXX_CFLAGS_ADD
    #     DefaultValue:  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ? "-D__CL7111" :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ? "-D__EDB7209" :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ? "-D__EDB7211" :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ? "-D__EDB7209 -D__EDB7212" : "" 
    # option CYGPKG_HAL_ARM_EDB7XXX_CFLAGS_ADD
    #     DefaultValue:  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ? "-D__CL7111" :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ? "-D__EDB7209" :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ? "-D__EDB7211" :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ? "-D__EDB7209 -D__EDB7212" : "" 
    # option CYGPKG_HAL_ARM_EDB7XXX_CFLAGS_ADD
    #     DefaultValue:  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ? "-D__CL7111" :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ? "-D__EDB7209" :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ? "-D__EDB7211" :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ? "-D__EDB7209 -D__EDB7212" : "" 
    # option CYGPKG_HAL_ARM_EDB7XXX_CFLAGS_ADD
    #     DefaultValue:  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ? "-D__CL7111" :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ? "-D__EDB7209" :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ? "-D__EDB7211" :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ? "-D__EDB7209 -D__EDB7212" : "" 
    # component CYGHWR_MEMORY_LAYOUT
    #     Calculated:  
    #               CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_cl7111_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_cl7111_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ? 
    #                 (CYG_HAL_STARTUP == "ROM" ? "arm_edb7209_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_edb7211_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_edb7211_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_edb7212_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_edb7212_rom" : "BOGUS.mlt" ) :  "BOGUS.mlt" 
    # component CYGHWR_MEMORY_LAYOUT
    #     Calculated:  
    #               CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_cl7111_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_cl7111_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ? 
    #                 (CYG_HAL_STARTUP == "ROM" ? "arm_edb7209_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_edb7211_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_edb7211_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_edb7212_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_edb7212_rom" : "BOGUS.mlt" ) :  "BOGUS.mlt" 
    # component CYGHWR_MEMORY_LAYOUT
    #     Calculated:  
    #               CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_cl7111_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_cl7111_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ? 
    #                 (CYG_HAL_STARTUP == "ROM" ? "arm_edb7209_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_edb7211_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_edb7211_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_edb7212_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_edb7212_rom" : "BOGUS.mlt" ) :  "BOGUS.mlt" 
    # component CYGHWR_MEMORY_LAYOUT
    #     Calculated:  
    #               CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_cl7111_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_cl7111_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ? 
    #                 (CYG_HAL_STARTUP == "ROM" ? "arm_edb7209_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_edb7211_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_edb7211_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_edb7212_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_edb7212_rom" : "BOGUS.mlt" ) :  "BOGUS.mlt" 
    # option CYGHWR_MEMORY_LAYOUT_LDI
    #     Calculated:  
    #                   CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_cl7111_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_cl7111_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ?
    #                     (CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7209_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7211_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7211_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7212_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7212_rom.ldi>" :  "BOGUS.ldi" ) :  "BOGUS.ldi" 
    # option CYGHWR_MEMORY_LAYOUT_LDI
    #     Calculated:  
    #                   CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_cl7111_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_cl7111_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ?
    #                     (CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7209_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7211_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7211_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7212_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7212_rom.ldi>" :  "BOGUS.ldi" ) :  "BOGUS.ldi" 
    # option CYGHWR_MEMORY_LAYOUT_LDI
    #     Calculated:  
    #                   CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_cl7111_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_cl7111_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ?
    #                     (CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7209_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7211_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7211_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7212_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7212_rom.ldi>" :  "BOGUS.ldi" ) :  "BOGUS.ldi" 
    # option CYGHWR_MEMORY_LAYOUT_LDI
    #     Calculated:  
    #                   CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_cl7111_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_cl7111_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ?
    #                     (CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7209_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7211_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7211_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7212_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7212_rom.ldi>" :  "BOGUS.ldi" ) :  "BOGUS.ldi" 
    # option CYGHWR_MEMORY_LAYOUT_H
    #     Calculated: 
    #                   CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_cl7111_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_cl7111_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ?
    #                     (CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7209_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7211_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7211_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7212_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7212_rom.h>" :  "BOGUS.h" ) :  "BOGUS.h" 
    # option CYGHWR_MEMORY_LAYOUT_H
    #     Calculated: 
    #                   CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_cl7111_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_cl7111_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ?
    #                     (CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7209_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7211_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7211_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7212_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7212_rom.h>" :  "BOGUS.h" ) :  "BOGUS.h" 
    # option CYGHWR_MEMORY_LAYOUT_H
    #     Calculated: 
    #                   CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_cl7111_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_cl7111_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ?
    #                     (CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7209_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7211_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7211_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7212_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7212_rom.h>" :  "BOGUS.h" ) :  "BOGUS.h" 
    # option CYGHWR_MEMORY_LAYOUT_H
    #     Calculated: 
    #                   CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_cl7111_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_cl7111_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ?
    #                     (CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7209_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7211_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7211_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7212_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7212_rom.h>" :  "BOGUS.h" ) :  "BOGUS.h" 
};

# Startup type
# When targetting the Cirrus Logic evaluation boards it is possible to build
# the system for either RAM bootstrap or ROM bootstrap(s). Select
# 'ram' when building programs to load into RAM using onboard
# debug software such as Angel or eCos GDB stubs.  Select 'rom'
# when building a stand-alone application which will be put
# into ROM.
#
cdl_component CYG_HAL_STARTUP {
    # Flavor: data
    user_value ROM
    # value_source user
    # Default value:  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ? "ROM" : "RAM"
    #     CYGHWR_HAL_ARM_EDB7XXX_VARIANT == EP7212
    #   --> RAM
    # Legal values:  "ROM"
    #                             ((CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209") ? "" : "RAM")
    #             
    #     CYGHWR_HAL_ARM_EDB7XXX_VARIANT == EP7212

    # The following properties are affected by this value
    # option CYGBLD_BUILD_GDB_STUBS
    #     Requires:  CYG_HAL_STARTUP == "ROM" 
    # option CYGBLD_BUILD_FLASH_TOOL
    #     Requires:  CYG_HAL_STARTUP == "RAM" 
    # option CYGBLD_BUILD_AUX_TESTS
    #     Requires:  CYG_HAL_STARTUP == "RAM" 
    # component CYGHWR_MEMORY_LAYOUT
    #     Calculated:  
    #               CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_cl7111_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_cl7111_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ? 
    #                 (CYG_HAL_STARTUP == "ROM" ? "arm_edb7209_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_edb7211_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_edb7211_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_edb7212_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_edb7212_rom" : "BOGUS.mlt" ) :  "BOGUS.mlt" 
    # component CYGHWR_MEMORY_LAYOUT
    #     Calculated:  
    #               CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_cl7111_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_cl7111_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ? 
    #                 (CYG_HAL_STARTUP == "ROM" ? "arm_edb7209_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_edb7211_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_edb7211_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_edb7212_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_edb7212_rom" : "BOGUS.mlt" ) :  "BOGUS.mlt" 
    # component CYGHWR_MEMORY_LAYOUT
    #     Calculated:  
    #               CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_cl7111_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_cl7111_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ? 
    #                 (CYG_HAL_STARTUP == "ROM" ? "arm_edb7209_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_edb7211_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_edb7211_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_edb7212_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_edb7212_rom" : "BOGUS.mlt" ) :  "BOGUS.mlt" 
    # component CYGHWR_MEMORY_LAYOUT
    #     Calculated:  
    #               CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_cl7111_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_cl7111_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ? 
    #                 (CYG_HAL_STARTUP == "ROM" ? "arm_edb7209_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_edb7211_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_edb7211_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_edb7212_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_edb7212_rom" : "BOGUS.mlt" ) :  "BOGUS.mlt" 
    # component CYGHWR_MEMORY_LAYOUT
    #     Calculated:  
    #               CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_cl7111_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_cl7111_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ? 
    #                 (CYG_HAL_STARTUP == "ROM" ? "arm_edb7209_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_edb7211_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_edb7211_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_edb7212_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_edb7212_rom" : "BOGUS.mlt" ) :  "BOGUS.mlt" 
    # component CYGHWR_MEMORY_LAYOUT
    #     Calculated:  
    #               CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_cl7111_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_cl7111_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ? 
    #                 (CYG_HAL_STARTUP == "ROM" ? "arm_edb7209_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_edb7211_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_edb7211_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_edb7212_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_edb7212_rom" : "BOGUS.mlt" ) :  "BOGUS.mlt" 
    # component CYGHWR_MEMORY_LAYOUT
    #     Calculated:  
    #               CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_cl7111_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_cl7111_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ? 
    #                 (CYG_HAL_STARTUP == "ROM" ? "arm_edb7209_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_edb7211_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_edb7211_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_edb7212_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_edb7212_rom" : "BOGUS.mlt" ) :  "BOGUS.mlt" 
    # option CYGHWR_MEMORY_LAYOUT_LDI
    #     Calculated:  
    #                   CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_cl7111_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_cl7111_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ?
    #                     (CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7209_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7211_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7211_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7212_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7212_rom.ldi>" :  "BOGUS.ldi" ) :  "BOGUS.ldi" 
    # option CYGHWR_MEMORY_LAYOUT_LDI
    #     Calculated:  
    #                   CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_cl7111_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_cl7111_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ?
    #                     (CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7209_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7211_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7211_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7212_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7212_rom.ldi>" :  "BOGUS.ldi" ) :  "BOGUS.ldi" 
    # option CYGHWR_MEMORY_LAYOUT_LDI
    #     Calculated:  
    #                   CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_cl7111_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_cl7111_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ?
    #                     (CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7209_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7211_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7211_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7212_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7212_rom.ldi>" :  "BOGUS.ldi" ) :  "BOGUS.ldi" 
    # option CYGHWR_MEMORY_LAYOUT_LDI
    #     Calculated:  
    #                   CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_cl7111_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_cl7111_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ?
    #                     (CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7209_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7211_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7211_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7212_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7212_rom.ldi>" :  "BOGUS.ldi" ) :  "BOGUS.ldi" 
    # option CYGHWR_MEMORY_LAYOUT_LDI
    #     Calculated:  
    #                   CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_cl7111_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_cl7111_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ?
    #                     (CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7209_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7211_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7211_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7212_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7212_rom.ldi>" :  "BOGUS.ldi" ) :  "BOGUS.ldi" 
    # option CYGHWR_MEMORY_LAYOUT_LDI
    #     Calculated:  
    #                   CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_cl7111_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_cl7111_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ?
    #                     (CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7209_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7211_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7211_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7212_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7212_rom.ldi>" :  "BOGUS.ldi" ) :  "BOGUS.ldi" 
    # option CYGHWR_MEMORY_LAYOUT_LDI
    #     Calculated:  
    #                   CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_cl7111_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_cl7111_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ?
    #                     (CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7209_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7211_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7211_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7212_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7212_rom.ldi>" :  "BOGUS.ldi" ) :  "BOGUS.ldi" 
    # option CYGHWR_MEMORY_LAYOUT_H
    #     Calculated: 
    #                   CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_cl7111_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_cl7111_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ?
    #                     (CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7209_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7211_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7211_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7212_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7212_rom.h>" :  "BOGUS.h" ) :  "BOGUS.h" 
    # option CYGHWR_MEMORY_LAYOUT_H
    #     Calculated: 
    #                   CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_cl7111_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_cl7111_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ?
    #                     (CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7209_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7211_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7211_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7212_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7212_rom.h>" :  "BOGUS.h" ) :  "BOGUS.h" 
    # option CYGHWR_MEMORY_LAYOUT_H
    #     Calculated: 
    #                   CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_cl7111_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_cl7111_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ?
    #                     (CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7209_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7211_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7211_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7212_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7212_rom.h>" :  "BOGUS.h" ) :  "BOGUS.h" 
    # option CYGHWR_MEMORY_LAYOUT_H
    #     Calculated: 
    #                   CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_cl7111_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_cl7111_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ?
    #                     (CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7209_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7211_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7211_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7212_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7212_rom.h>" :  "BOGUS.h" ) :  "BOGUS.h" 
    # option CYGHWR_MEMORY_LAYOUT_H
    #     Calculated: 
    #                   CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_cl7111_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_cl7111_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ?
    #                     (CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7209_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7211_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7211_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7212_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7212_rom.h>" :  "BOGUS.h" ) :  "BOGUS.h" 
    # option CYGHWR_MEMORY_LAYOUT_H
    #     Calculated: 
    #                   CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_cl7111_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_cl7111_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ?
    #                     (CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7209_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7211_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7211_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7212_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7212_rom.h>" :  "BOGUS.h" ) :  "BOGUS.h" 
    # option CYGHWR_MEMORY_LAYOUT_H
    #     Calculated: 
    #                   CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_cl7111_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_cl7111_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ?
    #                     (CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7209_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7211_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7211_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7212_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7212_rom.h>" :  "BOGUS.h" ) :  "BOGUS.h" 
    # option CYGSEM_HAL_ROM_MONITOR
    #     Requires:  CYG_HAL_STARTUP == "ROM" 
    # option CYGSEM_HAL_USE_ROM_MONITOR
    #     DefaultValue:  CYG_HAL_STARTUP == "RAM" ? "GDB_stubs" : 0 
    # option CYGSEM_HAL_USE_ROM_MONITOR
    #     Requires:  CYG_HAL_STARTUP == "RAM" 
    # component CYGDBG_HAL_DIAG_TO_DEBUG_CHAN
    #     DefaultValue:  (CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS  || CYG_HAL_STARTUP == "RAM") ? 1 : 0
    # option CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE
    #     DefaultValue:  CYG_HAL_STARTUP != "RAM" || !CYGSEM_HAL_USE_ROM_MONITOR || !CYGINT_HAL_VIRTUAL_VECTOR_SUPPORT_GUARANTEED 
};

# Diagnostic serial port baud rate
# This option selects the baud rate used for the diagnostic port.
# Note: this should match the value chosen for the GDB port if the
# diagnostic and GDB port are the same.
#
cdl_option CYGNUM_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL_BAUD {
    # Flavor: data
    user_value 115200
    # value_source user
    # Default value: 38400
    # Legal values: 9600 19200 38400 115200
};

# GDB serial port baud rate
# This option controls the baud rate used for the GDB connection.
#
cdl_option CYGNUM_HAL_VIRTUAL_VECTOR_DEBUG_CHANNEL_BAUD {
    # Flavor: data
    user_value 115200
    # value_source user
    # Default value: 38400
    # Legal values: 9600 19200 38400 115200
};

# Number of communication channels on the board
#
cdl_option CYGNUM_HAL_VIRTUAL_VECTOR_COMM_CHANNELS {
    # Calculated value: 2
    # Flavor: data
    # Current_value: 2

    # The following properties are affected by this value
    # option CYGNUM_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL_DEFAULT
    #     LegalValues: 0 to CYGNUM_HAL_VIRTUAL_VECTOR_COMM_CHANNELS-1
    # option CYGNUM_HAL_VIRTUAL_VECTOR_DEBUG_CHANNEL
    #     LegalValues: 0 to CYGNUM_HAL_VIRTUAL_VECTOR_COMM_CHANNELS-1
    # option CYGNUM_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL
    #     LegalValues: 0 to CYGNUM_HAL_VIRTUAL_VECTOR_COMM_CHANNELS-1
};

# Default console channel.
#
cdl_option CYGNUM_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL_DEFAULT {
    # Calculated value: 0
    # Flavor: data
    # Current_value: 0
    # Legal values: 0 to CYGNUM_HAL_VIRTUAL_VECTOR_COMM_CHANNELS-1
    #     CYGNUM_HAL_VIRTUAL_VECTOR_COMM_CHANNELS == 2
};

# Debug serial port
# The EDB7xxx boards have two serial ports. This option
# chooses which port will be used to connect to a host
# running GDB.
#
cdl_option CYGNUM_HAL_VIRTUAL_VECTOR_DEBUG_CHANNEL {
    # ActiveIf constraint: CYGPRI_HAL_VIRTUAL_VECTOR_DEBUG_CHANNEL_CONFIGURABLE
    #     CYGPRI_HAL_VIRTUAL_VECTOR_DEBUG_CHANNEL_CONFIGURABLE == 1
    #   --> 1

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Legal values: 0 to CYGNUM_HAL_VIRTUAL_VECTOR_COMM_CHANNELS-1
    #     CYGNUM_HAL_VIRTUAL_VECTOR_COMM_CHANNELS == 2
};

# Diagnostic serial port
# The EDB7xxx boards have two serial ports.  This option
# chooses which port will be used for diagnostic output.
#
cdl_option CYGNUM_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL {
    # ActiveIf constraint: CYGPRI_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL_CONFIGURABLE
    #     CYGPRI_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL_CONFIGURABLE == 1
    #   --> 1

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Legal values: 0 to CYGNUM_HAL_VIRTUAL_VECTOR_COMM_CHANNELS-1
    #     CYGNUM_HAL_VIRTUAL_VECTOR_COMM_CHANNELS == 2
};

# Processor clock rate
# The processor can run at various frequencies.
#
cdl_option CYGHWR_HAL_ARM_EDB7XXX_PROCESSOR_CLOCK {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 73728
    # value_source default
    # Default value:  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ? 18432 : 73728 
    #     CYGHWR_HAL_ARM_EDB7XXX_VARIANT == EP7212
    #   --> 73728
    # Legal values: 18432 36864 49152 73728
};

# Installed DRAM on board
# The Cirrus Logic boards can have various amounts of DRAM installed.
# The machine needs to be initialized differently, depending
# upon the amount installed.
#
cdl_option CYGHWR_HAL_ARM_EDB7XXX_DRAM_SIZE {
    # Flavor: data
    user_value 0
    # value_source user
    # Default value:  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ? 2 :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ? 0 : 16 
    #     CYGHWR_HAL_ARM_EDB7XXX_VARIANT == EP7212
    #     CYGHWR_HAL_ARM_EDB7XXX_VARIANT == EP7212
    #   --> 16
    # Legal values: 0 2 16
};

# Perform DRAM refresh in software
# This option will add code that refreshes the DRAM by
# touching all of DRAM during the system clock interrupt
# processing.
#
cdl_option CYGHWR_HAL_ARM_EDB7XXX_SOFTWARE_DRAM_REFRESH {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# LCD installed
# If an LCD panel is installed, 128K of DRAM will be dedicated to the
# LCD buffer by the system intialization.  Note: changing this value
# from the default will alter the memory map and a new debug enviroment
# (GDB or CygMon) may be required.
#
cdl_option CYGHWR_HAL_ARM_EDB7XXX_LCD_INSTALLED {
    # Flavor: bool
    user_value 0
    # value_source user
    # Default value: 1
};

# Real-time clock constants
#
cdl_component CYGNUM_HAL_RTC_CONSTANTS {
    # There is no associated value.
};

# >
# Real-time clock numerator
#
cdl_option CYGNUM_HAL_RTC_NUMERATOR {
    # Calculated value: 1000000000
    # Flavor: data
    # Current_value: 1000000000
};

# Real-time clock denominator
#
cdl_option CYGNUM_HAL_RTC_DENOMINATOR {
    # Calculated value: 100
    # Flavor: data
    # Current_value: 100
};

# Real-time clock period
#
cdl_option CYGNUM_HAL_RTC_PERIOD {
    # Calculated value: (5120)
    # Flavor: data
    # Current_value: 5120
};

# <
# Cirrus Logic build options
# Package specific build options including control over
# compiler flags used only in building this package,
# and details of which tests are built.
#
cdl_component CYGPKG_HAL_ARM_EDB7XXX_OPTIONS {
    # There is no associated value.
};

# >
# Additional compiler flags
# This option modifies the set of compiler flags for
# building the Cirrus Logic HAL. These flags are used in addition
# to the set of global flags.
#
cdl_option CYGPKG_HAL_ARM_EDB7XXX_CFLAGS_ADD {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value "-D__EDB7209 -D__EDB7212"
    # value_source default
    # Default value:  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ? "-D__CL7111" :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ? "-D__EDB7209" :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ? "-D__EDB7211" :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ? "-D__EDB7209 -D__EDB7212" : "" 
    #     CYGHWR_HAL_ARM_EDB7XXX_VARIANT == EP7212
    #     CYGHWR_HAL_ARM_EDB7XXX_VARIANT == EP7212
    #     CYGHWR_HAL_ARM_EDB7XXX_VARIANT == EP7212
    #     CYGHWR_HAL_ARM_EDB7XXX_VARIANT == EP7212
    #   --> "-D__EDB7209 -D__EDB7212"
};

# Suppressed compiler flags
# This option modifies the set of compiler flags for
# building the Cirrus Logic HAL. These flags are removed from
# the set of global flags if present.
#
cdl_option CYGPKG_HAL_ARM_EDB7XXX_CFLAGS_REMOVE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# Cirrus Logic tests
# This option specifies the set of tests for the Cirrus Logic HAL.
#
cdl_option CYGPKG_HAL_ARM_EDB7XXX_TESTS {
    # Calculated value:  "tests/dram_test" 
    # Flavor: data
    # Current_value: tests/dram_test
};

# <
# Memory layout
#
cdl_component CYGHWR_MEMORY_LAYOUT {
    # Calculated value:  
    #               CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_cl7111_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_cl7111_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ? 
    #                 (CYG_HAL_STARTUP == "ROM" ? "arm_edb7209_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_edb7211_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_edb7211_rom" : "BOGUS.mlt" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ? 
    #                 (CYG_HAL_STARTUP == "RAM" ? "arm_edb7212_ram" :  CYG_HAL_STARTUP == "ROM" ? "arm_edb7212_rom" : "BOGUS.mlt" ) :  "BOGUS.mlt" 
    #     CYGHWR_HAL_ARM_EDB7XXX_VARIANT == EP7212
    #     CYG_HAL_STARTUP == ROM
    #     CYG_HAL_STARTUP == ROM
    #     CYGHWR_HAL_ARM_EDB7XXX_VARIANT == EP7212
    #     CYG_HAL_STARTUP == ROM
    #     CYGHWR_HAL_ARM_EDB7XXX_VARIANT == EP7212
    #     CYG_HAL_STARTUP == ROM
    #     CYG_HAL_STARTUP == ROM
    #     CYGHWR_HAL_ARM_EDB7XXX_VARIANT == EP7212
    #     CYG_HAL_STARTUP == ROM
    #     CYG_HAL_STARTUP == ROM
    # Flavor: data
    # Current_value: arm_edb7212_rom
};

# >
# Memory layout linker script fragment
#
cdl_option CYGHWR_MEMORY_LAYOUT_LDI {
    # Calculated value:  
    #                   CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_cl7111_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_cl7111_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ?
    #                     (CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7209_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7211_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7211_rom.ldi>" :  "BOGUS.ldi" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7212_ram.ldi>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7212_rom.ldi>" :  "BOGUS.ldi" ) :  "BOGUS.ldi" 
    #     CYGHWR_HAL_ARM_EDB7XXX_VARIANT == EP7212
    #     CYG_HAL_STARTUP == ROM
    #     CYG_HAL_STARTUP == ROM
    #     CYGHWR_HAL_ARM_EDB7XXX_VARIANT == EP7212
    #     CYG_HAL_STARTUP == ROM
    #     CYGHWR_HAL_ARM_EDB7XXX_VARIANT == EP7212
    #     CYG_HAL_STARTUP == ROM
    #     CYG_HAL_STARTUP == ROM
    #     CYGHWR_HAL_ARM_EDB7XXX_VARIANT == EP7212
    #     CYG_HAL_STARTUP == ROM
    #     CYG_HAL_STARTUP == ROM
    # Flavor: data
    # Current_value: <pkgconf/mlt_arm_edb7212_rom.ldi>
};

# Memory layout header file
#
cdl_option CYGHWR_MEMORY_LAYOUT_H {
    # Calculated value: 
    #                   CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "CL_PS7111" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_cl7111_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_cl7111_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7209" ?
    #                     (CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7209_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7211" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7211_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7211_rom.h>" :  "BOGUS.h" ) :  CYGHWR_HAL_ARM_EDB7XXX_VARIANT == "EP7212" ?
    #                     (CYG_HAL_STARTUP == "RAM" ? "<pkgconf/mlt_arm_edb7212_ram.h>" :   CYG_HAL_STARTUP == "ROM" ? "<pkgconf/mlt_arm_edb7212_rom.h>" :  "BOGUS.h" ) :  "BOGUS.h" 
    #     CYGHWR_HAL_ARM_EDB7XXX_VARIANT == EP7212
    #     CYG_HAL_STARTUP == ROM
    #     CYG_HAL_STARTUP == ROM
    #     CYGHWR_HAL_ARM_EDB7XXX_VARIANT == EP7212
    #     CYG_HAL_STARTUP == ROM
    #     CYGHWR_HAL_ARM_EDB7XXX_VARIANT == EP7212
    #     CYG_HAL_STARTUP == ROM
    #     CYG_HAL_STARTUP == ROM
    #     CYGHWR_HAL_ARM_EDB7XXX_VARIANT == EP7212
    #     CYG_HAL_STARTUP == ROM
    #     CYG_HAL_STARTUP == ROM
    # Flavor: data
    # Current_value: <pkgconf/mlt_arm_edb7212_rom.h>
};

# <
# <
# <
# <
# Infrastructure
# Common types and useful macros.
# Tracing and assertion facilities.
# Package startup options.
#
cdl_package CYGPKG_INFRA {
    # Packages cannot be added or removed, nor can their version be changed,
    # simply by editing their value. Instead the appropriate configuration
    # should be used to perform these actions.

    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 current
};

# >
# Use varargs in diag_printf()
# The diagnostic routine diag_printf() can be defined
# using either variadic arguments or a K&R style definition.
# The former will work in most circumstances, but if variable
# argument handling is broken or missing then the K&R variant
# may be used. This will also generate warnings about the
# declaration of diag_printf() not being a prototype.
# These may safely be ignored.
#
cdl_option CYGDBG_INFRA_DIAG_PRINTF_USE_VARARG {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Asserts & Tracing
# The eCos source code contains a significant amount of
# internal debugging support, in the form of assertions and
# tracing.
# Assertions check at runtime that various conditions are as
# expected; if not, execution is halted.
# Tracing takes the form of text messages that are output
# whenever certain events occur, or whenever functions are
# called or return.
# The most important property of these checks and messages is
# that they are not required for the program to run.
# It is prudent to develop software with assertions enabled,
# but disable them when making a product release, thus
# removing the overhead of that checking.
# It is possible to enable assertions and tracing
# independently.
# There are also options controlling the exact behaviour of
# the assertion and tracing facilities, thus giving users
# finer control over the code and data size requirements.
#
cdl_component CYGPKG_INFRA_DEBUG {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0

    # The following properties are affected by this value
    # component CYGFUN_KERNEL_THREADS_STACK_CHECKING
    #     ActiveIf: CYGPKG_INFRA_DEBUG
    # component CYGFUN_KERNEL_THREADS_STACK_MEASUREMENT
    #     DefaultValue:  0 != CYGPKG_INFRA_DEBUG 
};

# >
# Use asserts
# If this option is defined, asserts in the code are tested.
# Assert functions (CYG_ASSERT()) are defined in
# 'include/cyg/infra/cyg_ass.h' within the 'install' tree.
# If it is not defined, these result in no additional
# object code and no checking of the asserted conditions.
#
cdl_component CYGDBG_USE_ASSERTS {
    # This option is not active
    # The parent CYGPKG_INFRA_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # component CYGFUN_KERNEL_THREADS_STACK_CHECKING
    #     ActiveIf: CYGDBG_USE_ASSERTS
    # option CYGDBG_MEMALLOC_ALLOCATOR_DLMALLOC_DEBUG
    #     Requires: CYGDBG_USE_ASSERTS
    # option CYGDBG_MEMALLOC_ALLOCATOR_DLMALLOC_DEBUG
    #     DefaultValue:  0 != CYGDBG_USE_ASSERTS 
};

# >
# Preconditions
# This option allows individual control of preconditions.
# A precondition is one type of assert, which it is
# useful to control separately from more general asserts.
# The function is CYG_PRECONDITION(condition,msg).
#
cdl_option CYGDBG_INFRA_DEBUG_PRECONDITIONS {
    # This option is not active
    # The parent CYGDBG_USE_ASSERTS is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Postconditions
# This option allows individual control of postconditions.
# A postcondition is one type of assert, which it is
# useful to control separately from more general asserts.
# The function is CYG_POSTCONDITION(condition,msg).
#
cdl_option CYGDBG_INFRA_DEBUG_POSTCONDITIONS {
    # This option is not active
    # The parent CYGDBG_USE_ASSERTS is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Loop invariants
# This option allows individual control of loop invariants.
# A loop invariant is one type of assert, which it is
# useful to control separately from more general asserts,
# particularly since a loop invariant is typically evaluated
# a great many times when used correctly.
# The function is CYG_LOOP_INVARIANT(condition,msg).
#
cdl_option CYGDBG_INFRA_DEBUG_LOOP_INVARIANTS {
    # This option is not active
    # The parent CYGDBG_USE_ASSERTS is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Use assert text
# All assertions within eCos contain a text message
# which should give some information about the condition
# being tested.
# These text messages will end up being embedded in the
# application image and hence there is a significant penalty
# in terms of image size.
# It is possible to suppress the use of these messages by
# disabling this option.
# This results in smaller code size, but there is less
# human-readable information if an assertion actually gets
# triggered.
#
cdl_option CYGDBG_INFRA_DEBUG_ASSERT_MESSAGE {
    # This option is not active
    # The parent CYGDBG_USE_ASSERTS is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# Use tracing
# If this option is defined, tracing operations
# result in output or logging, depending on other options.
# This may have adverse effects on performance, if the time
# taken to output message overwhelms the available CPU
# power or output bandwidth.
# Trace functions (CYG_TRACE()) are defined in
# 'include/cyg/infra/cyg_trac.h' within the 'install' tree.
# If it is not defined, these result in no additional
# object code and no trace information.
#
cdl_component CYGDBG_USE_TRACING {
    # This option is not active
    # The parent CYGPKG_INFRA_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0

    # The following properties are affected by this value
    # option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_SIZE
    #     ActiveIf: CYGDBG_USE_TRACING
    # option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_WRAP
    #     ActiveIf: CYGDBG_USE_TRACING
    # option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_HALT
    #     ActiveIf: CYGDBG_USE_TRACING
    # option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_PRINT
    #     ActiveIf: CYGDBG_USE_TRACING
    # option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_PRINT_ON_ASSERT
    #     ActiveIf: CYGDBG_USE_TRACING
};

# >
# Trace function reports
# This option allows individual control of
# function entry/exit tracing, independent of
# more general tracing output.
# This may be useful to remove clutter from a
# trace log.
#
cdl_option CYGDBG_INFRA_DEBUG_FUNCTION_REPORTS {
    # This option is not active
    # The parent CYGDBG_USE_TRACING is not active
    # The parent CYGDBG_USE_TRACING is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Use trace text
# All trace calls within eCos contain a text message
# which should give some information about the circumstances.
# These text messages will end up being embedded in the
# application image and hence there is a significant penalty
# in terms of image size.
# It is possible to suppress the use of these messages by
# disabling this option.
# This results in smaller code size, but there is less
# human-readable information available in the trace output,
# possibly only filenames and line numbers.
#
cdl_option CYGDBG_INFRA_DEBUG_TRACE_MESSAGE {
    # This option is not active
    # The parent CYGDBG_USE_TRACING is not active
    # The parent CYGDBG_USE_TRACING is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# Null output
# A null output module which is useful when
# debugging interactively; the output routines
# can be breakpointed rather than have them actually
# 'print' something.
#
cdl_option CYGDBG_INFRA_DEBUG_TRACE_ASSERT_NULL {
    # This option is not active
    # The parent CYGPKG_INFRA_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Simple output
# An output module which produces simple output
# from tracing and assertion events.
#
cdl_option CYGDBG_INFRA_DEBUG_TRACE_ASSERT_SIMPLE {
    # This option is not active
    # The parent CYGPKG_INFRA_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Fancy output
# An output module which produces fancy output
# from tracing and assertion events.
#
cdl_option CYGDBG_INFRA_DEBUG_TRACE_ASSERT_FANCY {
    # This option is not active
    # The parent CYGPKG_INFRA_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Buffered tracing
# An output module which buffers output
# from tracing and assertion events. The stored
# messages are output when an assert fires, or
# CYG_TRACE_PRINT() (defined in <cyg/infra/cyg_trac.h>)
# is called.
# Of course, there will only be stored messages
# if tracing per se (CYGDBG_USE_TRACING)
# is enabled above.
#
cdl_component CYGDBG_INFRA_DEBUG_TRACE_ASSERT_BUFFER {
    # This option is not active
    # The parent CYGPKG_INFRA_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# >
# Trace buffer size
# The size of the trace buffer. This counts the number
# of trace records stored. When the buffer fills it
# either wraps, stops recording, or generates output.
#
cdl_option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_SIZE {
    # This option is not active
    # The parent CYGDBG_INFRA_DEBUG_TRACE_ASSERT_BUFFER is not active
    # ActiveIf constraint: CYGDBG_USE_TRACING
    #     CYGDBG_USE_TRACING == 0
    #   --> 0

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 32
    # value_source default
    # Default value: 32
    # Legal values: 5 to 65535
};

# Wrap trace buffer when full
# When the trace buffer has filled with records it
# starts again at the beginning. Hence only the last
# CYGDBG_INFRA_DEBUG_TRACE_BUFFER_SIZE messages will
# be recorded.
#
cdl_option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_WRAP {
    # This option is not active
    # The parent CYGDBG_INFRA_DEBUG_TRACE_ASSERT_BUFFER is not active
    # ActiveIf constraint: CYGDBG_USE_TRACING
    #     CYGDBG_USE_TRACING == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Halt trace buffer when full
# When the trace buffer has filled with records it
# stops recording. Hence only the first
# CYGDBG_INFRA_DEBUG_TRACE_BUFFER_SIZE messages will
# be recorded.
#
cdl_option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_HALT {
    # This option is not active
    # The parent CYGDBG_INFRA_DEBUG_TRACE_ASSERT_BUFFER is not active
    # ActiveIf constraint: CYGDBG_USE_TRACING
    #     CYGDBG_USE_TRACING == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Print trace buffer when full
# When the trace buffer has filled with records it
# prints the contents of the buffer. The buffer is then
# emptied and the system continues.
#
cdl_option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_PRINT {
    # This option is not active
    # The parent CYGDBG_INFRA_DEBUG_TRACE_ASSERT_BUFFER is not active
    # ActiveIf constraint: CYGDBG_USE_TRACING
    #     CYGDBG_USE_TRACING == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Print trace buffer on assert fail
# When an assertion fails the trace buffer will be 
# printed to the default diagnostic device.
#
cdl_option CYGDBG_INFRA_DEBUG_TRACE_BUFFER_PRINT_ON_ASSERT {
    # This option is not active
    # The parent CYGDBG_INFRA_DEBUG_TRACE_ASSERT_BUFFER is not active
    # ActiveIf constraint: CYGDBG_USE_TRACING
    #     CYGDBG_USE_TRACING == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# Use function names
# All trace and assert calls within eCos contain a
# reference to the builtin macro '__PRETTY_FUNCTION__',
# which evaluates to a string containing
# the name of the current function.
# This is useful when reading a trace log.
# It is possible to suppress the use of the function name
# by disabling this option.
# This results in smaller code size, but there is less
# human-readable information available in the trace output,
# possibly only filenames and line numbers.
#
cdl_option CYGDBG_INFRA_DEBUG_FUNCTION_PSEUDOMACRO {
    # This option is not active
    # The parent CYGPKG_INFRA_DEBUG is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# Startup options
# Some packages require a startup routine to be called.
# This can be carried out by application code, by supplying
# a routine called cyg_package_start() which calls the
# appropriate package startup routine(s).
# Alternatively, this routine can be constructed automatically
# and configured to call the startup routines of your choice.
#
cdl_component CYGPKG_INFRA_STARTUP {
    # There is no associated value.
};

# >
# Start uITRON subsystem
# Generate a call to initialize the
# uITRON compatibility subsystem
# within the system version of cyg_package_start().
# This enables compatibility with uITRON.
# You must configure uITRON with the correct tasks before
# starting the uItron subsystem.
# If this is disabled, and you want to use uITRON,
# you must call cyg_uitron_start() from your own
# cyg_package_start() or cyg_userstart().
#
cdl_option CYGSEM_START_UITRON_COMPATIBILITY {
    # This option is not active
    # ActiveIf constraint: CYGPKG_UITRON
    #     CYGPKG_UITRON (unknown) == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires: CYGPKG_UITRON
    #     CYGPKG_UITRON (unknown) == 0
    #   --> 0
};

# <
# Smaller slower memcpy()
# Enabling this option causes the implementation of
# the standard memcpy() routine to reduce code
# size at the expense of execution speed. This
# option is automatically enabled with the use of
# the -Os option to the compiler. Also note that
# the compiler will try to use its own builtin
# version of memcpy() if possible, ignoring the
# implementation in this package, unless given
# the -fno-builtin compiler option.
#
cdl_option CYGIMP_INFRA_PREFER_SMALL_TO_FAST_MEMCPY {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Smaller slower memset()
# Enabling this option causes the implementation of
# the standard memset() routine to reduce code
# size at the expense of execution speed. This
# option is automatically enabled with the use of
# the -Os option to the compiler. Also note that
# the compiler will try to use its own builtin
# version of memset() if possible, ignoring the
# implementation in this package, unless given
# the -fno-builtin compiler option.
#
cdl_option CYGIMP_INFRA_PREFER_SMALL_TO_FAST_MEMSET {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Provide empty C++ delete functions
# To deal with virtual destructors, where the correct delete()
# function must be called for the derived class in question, the
# underlying delete is called when needed, from destructors.  This
# is regardless of whether the destructor is called by delete itself.
# So there is a reference to delete() from all destructors.  The
# default builtin delete() attempts to call free() if there is
# one defined.  So, if you have destructors, and you have free(),
# as in malloc() and free(), any destructor counts as a reference
# to free().  So the dynamic memory allocation code is linked
# in regardless of whether it gets explicitly called. This
# increases code and data size needlessly.
# To defeat this undesirable behaviour, we define empty versions
# of delete and delete.  But doing this prevents proper use
# of dynamic memory in C++ programs via C++'s new and delete
# operators.
# Therefore, this option is provided
# for explicitly disabling the provision of these empty functions,
# so that new and delete can be used, if that is what is required.
#
cdl_option CYGFUN_INFRA_EMPTY_DELETE_FUNCTIONS {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Infra build options
# Package specific build options including control over
# compiler flags used only in building this package.
#
cdl_component CYGPKG_INFRA_OPTIONS {
    # There is no associated value.
};

# >
# Additional compiler flags
# This option modifies the set of compiler flags for
# building the eCos infra package. These flags are used
# in addition to the set of global flags.
#
cdl_option CYGPKG_INFRA_CFLAGS_ADD {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# Suppressed compiler flags
# This option modifies the set of compiler flags for
# building the eCos infra package. These flags are removed from
# the set of global flags if present.
#
cdl_option CYGPKG_INFRA_CFLAGS_REMOVE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# <
# <
# eCos kernel
# doc: redirect/ecos-kernel-overview.html
# This package contains the core functionality of the eCos
# kernel. It relies on functionality provided by various HAL
# packages and by the eCos infrastructure. In turn the eCos
# kernel provides support for other packages such as the device
# drivers and the uITRON compatibility layer.
#
cdl_package CYGPKG_KERNEL {
    # Packages cannot be added or removed, nor can their version be changed,
    # simply by editing their value. Instead the appropriate configuration
    # should be used to perform these actions.

    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 current

    # The following properties are affected by this value
    # option CYGFUN_HAL_COMMON_KERNEL_SUPPORT
    #     Requires: CYGPKG_KERNEL
    # option CYGFUN_HAL_COMMON_KERNEL_SUPPORT
    #     DefaultValue: CYGPKG_KERNEL
    # option CYGSEM_MEMALLOC_ALLOCATOR_FIXED_THREADAWARE
    #     ActiveIf: CYGPKG_KERNEL
    # option CYGSEM_MEMALLOC_ALLOCATOR_VARIABLE_THREADAWARE
    #     ActiveIf: CYGPKG_KERNEL
    # option CYGIMP_MEMALLOC_ALLOCATOR_DLMALLOC_THREADAWARE
    #     ActiveIf: CYGPKG_KERNEL
    # option CYGIMP_MEMALLOC_ALLOCATOR_DLMALLOC_THREADAWARE
    #     Requires: CYGPKG_KERNEL
    # option CYGFUN_MEMALLOC_KAPI
    #     ActiveIf: CYGPKG_KERNEL
    # option CYGBLD_BUILD_FLASH_TOOL
    #     Requires: CYGPKG_KERNEL
    # option CYGBLD_BUILD_AUX_TESTS
    #     Requires: CYGPKG_KERNEL
};

# >
# Kernel interrupt handling
# doc: redirect/interrupts.html
# The majority of configuration options related to interrupt
# handling are in the HAL packages, since usually the code has
# to be platform-specific. There are a number of options
# provided within the kernel related to slightly higher-level
# concepts, for example Delayed Service Routines.
#
cdl_component CYGPKG_KERNEL_INTERRUPTS {
    # There is no associated value.

    # The following properties are affected by this value
    # option CYGDBG_KERNEL_INSTRUMENT_INTR
    #     ActiveIf: CYGPKG_KERNEL_INTERRUPTS
};

# >
# Use delayed service routines (DSRs)
# In eCos the recommended way to handle device interrupts is to
# do a minimum amount of work inside the low level interrupt
# handler itself, and instead do as much as possible in a
# Delayed Service Routine or DSR. If an application does not
# make use of DSRs directly or indirectly then it is possible
# to disable the DSR support completely, which reduces the
# overheads of context switches and interrupt handling. Note
# that the kernel real-time clock makes use of DSRs, as do many
# of the device drivers. 
#
cdl_component CYGIMP_KERNEL_INTERRUPTS_DSRS {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # option CYGVAR_KERNEL_COUNTERS_CLOCK
    #     Requires: CYGIMP_KERNEL_INTERRUPTS_DSRS
};

# >
#
cdl_interface CYGINT_KERNEL_INTERRUPTS_DSRS {
    # Implemented by CYGIMP_KERNEL_INTERRUPTS_DSRS_LIST, active, disabled
    # Implemented by CYGIMP_KERNEL_INTERRUPTS_DSRS_TABLE, active, enabled
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 1
    # Requires: 1 == CYGINT_KERNEL_INTERRUPTS_DSRS
    #     CYGINT_KERNEL_INTERRUPTS_DSRS == 1
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_KERNEL_INTERRUPTS_DSRS
    #     Requires: 1 == CYGINT_KERNEL_INTERRUPTS_DSRS
};

# Use linked lists for DSRs
# When DSR support is enabled the kernel must keep track of all
# the DSRs that are pending. This information can be kept in a
# fixed-size table or in a linked list. The list implementation
# requires that the kernel disable interrupts for a very short
# period of time outside interrupt handlers, but there is no
# possibility of a table overflow occurring.
#
cdl_option CYGIMP_KERNEL_INTERRUPTS_DSRS_LIST {
    # Flavor: bool
    user_value 0
    # value_source user
    # Default value: 1
};

# Use fixed-size table for DSRs
# When DSR support is enabled the kernel must keep track of all
# the DSRs that are pending. This information can be kept in a
# fixed-size table or in a linked list. The table
# implementation involves a very small risk of overflow at
# run-time if a given interrupt source is able to have more
# than one pending DSR. However it has the advantage that
# the kernel does not need to disable interrupts outside
# interrupt handlers.
#
cdl_component CYGIMP_KERNEL_INTERRUPTS_DSRS_TABLE {
    # Flavor: bool
    user_value 1
    # value_source user
    # Default value: 0
};

# >
# Number of entries in fixed-size DSR table
# When DSR support is enabled the kernel must keep track of all
# the DSRs that are pending. One approach involves a fixed-size
# table, which involves a very small risk of overflow at
# run-time. By increasing the table size it is possible to reduce
# this risk.
#
cdl_option CYGNUM_KERNEL_INTERRUPTS_DSRS_TABLE_SIZE {
    # Flavor: data
    user_value 8
    # value_source user
    # Default value: 32
    # Legal values: 2 to 1024
};

# <
# Chain all interrupts together
# Interrupts can be attached to vectors either singly, or be
# chained together. The latter is necessary if there is no way
# of discovering which device has interrupted without
# inspecting the device itself. It can also reduce the amount
# of RAM needed for interrupt decoding tables and code.
#
cdl_option CYGIMP_KERNEL_INTERRUPTS_CHAIN {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires: CYGIMP_HAL_COMMON_INTERRUPTS_CHAIN
    #     CYGIMP_HAL_COMMON_INTERRUPTS_CHAIN == 0
    #   --> 0
};

# <
# <
# Exception handling
# doc: redirect/exceptions.html
# In the context of the eCos kernel exceptions are unexpected
# events detected by the hardware, for example an attempt to
# execute an illegal instruction. There is no relation with
# other forms of exception, for example the catch and throw
# facilities of languages like C++. It is possible to disable
# all support for exceptions and thus save some memory.
#
cdl_component CYGPKG_KERNEL_EXCEPTIONS {
    # Flavor: bool
    user_value 0
    # value_source user
    # Default value: 1
    # Requires: CYGPKG_HAL_EXCEPTIONS
    #     CYGPKG_HAL_EXCEPTIONS == 0
    #   --> 0

    # The following properties are affected by this value
    # option CYGPKG_HAL_EXCEPTIONS
    #     Requires: CYGPKG_KERNEL_EXCEPTIONS
    # option CYGPKG_HAL_EXCEPTIONS
    #     DefaultValue: CYGPKG_KERNEL_EXCEPTIONS
};

# >
# Decode exception types in kernel
# On targets where several different types of exception are
# possible, for example executing an illegal instruction and
# division by zero, it is possible for the kernel to do some
# decoding of the exception type and deliver the different
# types of exception to different handlers in the application
# code. Alternatively the kernel can simply pass all
# exceptions directly to application code, leaving the
# decoding to be done by the application
#
cdl_option CYGSEM_KERNEL_EXCEPTIONS_DECODE {
    # This option is not active
    # The parent CYGPKG_KERNEL_EXCEPTIONS is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Use global exception handlers
# In the context of the eCos kernel exceptions are
# unexpected events detected by the hardware, for
# example an attempt to execute an illegal
# instruction. If the kernel is configured
# to support exceptions then two implementations are
# possible. The default implementation involves a single set
# of exception handlers that are in use for the entire
# system. The alternative implementation allows different
# exception handlers to be specified for each thread.
#
cdl_option CYGSEM_KERNEL_EXCEPTIONS_GLOBAL {
    # This option is not active
    # The parent CYGPKG_KERNEL_EXCEPTIONS is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# Kernel schedulers
# doc: redirect/the-scheduler.html
# The eCos kernel provides a choice of schedulers. In addition
# there are a number of configuration options to control the
# detailed behaviour of these schedulers.
#
cdl_component CYGPKG_KERNEL_SCHED {
    # There is no associated value.

    # The following properties are affected by this value
    # option CYGDBG_KERNEL_INSTRUMENT_SCHED
    #     ActiveIf: CYGPKG_KERNEL_SCHED
};

# >
# Number of schedulers in this configuration
#
cdl_interface CYGINT_KERNEL_SCHEDULER {
    # Implemented by CYGSEM_KERNEL_SCHED_MLQUEUE, active, disabled
    # Implemented by CYGSEM_KERNEL_SCHED_BITMAP, active, enabled
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 1
    # Requires: 1 == CYGINT_KERNEL_SCHEDULER
    #     CYGINT_KERNEL_SCHEDULER == 1
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_KERNEL_SCHEDULER
    #     Requires: 1 == CYGINT_KERNEL_SCHEDULER
};

# Non-zero if the active schedule only has unique priorities
# Not all schedulers allow mutiple threads to use the same
# priority. That property is signalled via this option, allowing
# scheduler and tests to behave accordingly.
#
cdl_interface CYGINT_KERNEL_SCHEDULER_UNIQUE_PRIORITIES {
    # Implemented by CYGSEM_KERNEL_SCHED_BITMAP, active, enabled
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 1

    # The following properties are affected by this value
    # component CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL
    #     Requires:  CYGINT_KERNEL_SCHEDULER_UNIQUE_PRIORITIES == 0 
};

# Multi-level queue scheduler
# The multi-level queue scheduler supports multiple priority
# levels and multiple threads at each priority level.
# Preemption between priority levels is automatic. Timeslicing
# within a given priority level is controlled by a separate
# configuration option.
#
cdl_option CYGSEM_KERNEL_SCHED_MLQUEUE {
    # Flavor: bool
    user_value 0
    # value_source user
    # Default value: 1

    # The following properties are affected by this value
    # option CYGPRI_KERNEL_SCHED_IMPL_HXX
    #     Calculated:   CYGSEM_KERNEL_SCHED_BITMAP  ? "<cyg/kernel/bitmap.hxx>"  : CYGSEM_KERNEL_SCHED_MLQUEUE ? "<cyg/kernel/mlqueue.hxx>" : CYGSEM_KERNEL_SCHED_LOTTERY ? "<cyg/kernel/lottery.hxx>" : "!!!-- Configuration broken - no scheduler selected --!!!"
    # component CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL
    #     ActiveIf:  CYGSEM_KERNEL_SCHED_MLQUEUE 
};

# Bitmap scheduler
# The bitmap scheduler supports multiple priority levels but
# only one thread can exist at each priority level. This means
# that scheduling decisions are very simple and hence the
# scheduler is efficient. Preemption between priority levels is
# automatic. Timeslicing within a given priority level is
# irrelevant since there can be only one thread at each
# priority level.
#
cdl_option CYGSEM_KERNEL_SCHED_BITMAP {
    # Flavor: bool
    user_value 1
    # value_source user
    # Default value: 0

    # The following properties are affected by this value
    # option CYGPRI_KERNEL_SCHED_IMPL_HXX
    #     Calculated:   CYGSEM_KERNEL_SCHED_BITMAP  ? "<cyg/kernel/bitmap.hxx>"  : CYGSEM_KERNEL_SCHED_MLQUEUE ? "<cyg/kernel/mlqueue.hxx>" : CYGSEM_KERNEL_SCHED_LOTTERY ? "<cyg/kernel/lottery.hxx>" : "!!!-- Configuration broken - no scheduler selected --!!!"
    # component CYGSEM_KERNEL_SCHED_TIMESLICE
    #     Requires: !CYGSEM_KERNEL_SCHED_BITMAP
};

# Scheduler header file
# This option sets a preprocessor symbol which names the header
# file for the selected scheduler.  It is used internally by the
# common scheduler code to include the correct header file.
#
cdl_option CYGPRI_KERNEL_SCHED_IMPL_HXX {
    # Calculated value:   CYGSEM_KERNEL_SCHED_BITMAP  ? "<cyg/kernel/bitmap.hxx>"  : CYGSEM_KERNEL_SCHED_MLQUEUE ? "<cyg/kernel/mlqueue.hxx>" : CYGSEM_KERNEL_SCHED_LOTTERY ? "<cyg/kernel/lottery.hxx>" : "!!!-- Configuration broken - no scheduler selected --!!!"
    #     CYGSEM_KERNEL_SCHED_BITMAP == 1
    #     CYGSEM_KERNEL_SCHED_MLQUEUE == 0
    #     CYGSEM_KERNEL_SCHED_LOTTERY (unknown) == 0
    # Flavor: data
    # Current_value: <cyg/kernel/bitmap.hxx>
};

# Number of priority levels
# This option controls the number of priority levels that are
# available. For some types of scheduler including the bitmap
# scheduler this may impose an upper bound on the number of
# threads in the system. For other schedulers such as the
# mlqueue scheduler the number of threads is independent from
# the number of priority levels. Note that the lowest priority
# level is normally used only by the idle thread, although
# application threads can run at this priority if necessary.
#
cdl_component CYGNUM_KERNEL_SCHED_PRIORITIES {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 32
    # value_source default
    # Default value: 32
    # Legal values: 1 to 32

    # The following properties are affected by this value
    # option CYGIMP_IDLE_THREAD_YIELD
    #     ActiveIf: (CYGNUM_KERNEL_SCHED_PRIORITIES == 1)
    # option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DEFAULT_PRIORITY
    #     LegalValues: 0 to  CYGNUM_KERNEL_SCHED_PRIORITIES - 1 
};

# >
# Bitmap size
# This option automatically defines the size of bitmap
# used to track occupied priority levels.
#
cdl_option CYGNUM_KERNEL_SCHED_BITMAP_SIZE {
    # Calculated value: "CYGNUM_KERNEL_SCHED_PRIORITIES"
    # Flavor: data
    # Current_value: CYGNUM_KERNEL_SCHED_PRIORITIES
};

# Dequeue oldest threads first
# With this option enabled, threads queued in a thread queue
# will be dequeued in priority order, rather than last in,
# first out (LIFO). Threads of equal priority are dequeued
# oldest first. The only exception is the scheduler run 
# queues where order is less important as each is already
# sorted by priority. Note that this makes the thread queueing
# less deterministic.
#
cdl_option CYGIMP_KERNEL_SCHED_SORTED_QUEUES {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# <
# Scheduler timeslicing
# Some schedulers including the mlqueue scheduler support
# timeslicing. This means that the kernel will check regularly
# whether or not there is another runnable thread with the
# same priority, and if there is such a thread there will be
# an automatic context switch. Not all applications require
# timeslicing, for example because every thread performs a
# blocking operation regularly. For these applications it is
# possible to disable timeslicing, which reduces the overheads
# associated with timer interrupts.
#
cdl_component CYGSEM_KERNEL_SCHED_TIMESLICE {
    # Flavor: bool
    user_value 0
    # value_source user
    # Default value: 1
    # Requires: !CYGSEM_KERNEL_SCHED_BITMAP
    #     CYGSEM_KERNEL_SCHED_BITMAP == 1
    #   --> 0
    # Requires: CYGVAR_KERNEL_COUNTERS_CLOCK
    #     CYGVAR_KERNEL_COUNTERS_CLOCK == 1
    #   --> 1
};

# >
# Number of clock ticks between timeslices
# Assuming timeslicing is enabled, how frequently should it
# take place? The value of this option corresponds to the
# number of clock ticks that should occur before a timeslice
# takes place, so increasing the value reduces the frequency
# of timeslices.
#
cdl_option CYGNUM_KERNEL_SCHED_TIMESLICE_TICKS {
    # This option is not active
    # The parent CYGSEM_KERNEL_SCHED_TIMESLICE is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 5
    # value_source default
    # Default value: 5
    # Legal values: 1 to 65535
};

# Support runtime enable of timeslice per-thread
# This option makes timslicing a per-thread runtime
# option. When enabled, threads may have timeslicing
# turned on or off dynamically. This is generally used
# by higher level APIs (such as POSIX) to implement
# differing scheduling policies.
#
cdl_option CYGSEM_KERNEL_SCHED_TIMESLICE_ENABLE {
    # This option is not active
    # The parent CYGSEM_KERNEL_SCHED_TIMESLICE is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: false
    #     false (unknown) == 0
    #   --> 0
};

# <
# Enable ASR support
# This component controls support for Asynchronous Service
# Routines (ASRs). This is a function that may be called
# from the scheduler when it has just exited the scheduler
# lock. This is primarily for use by API compatibility layers.
#
cdl_component CYGSEM_KERNEL_SCHED_ASR_SUPPORT {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: false
    #     false (unknown) == 0
    #   --> 0
};

# >
# Make ASR function global
# This option controls whether the ASR function is shared by
# all threads, or whether each thread may have its own ASR
# function.
#
cdl_option CYGSEM_KERNEL_SCHED_ASR_GLOBAL {
    # This option is not active
    # The parent CYGSEM_KERNEL_SCHED_ASR_SUPPORT is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: true
    #     true (unknown) == 0
    #   --> 0
};

# Make ASR data global
# This option controls whether the ASR data is shared by
# all threads, or whether each thread may have its own ASR
# data. This is independent of the previous option because
# it may be useful to pass per-thread data to a shared ASR
# function.
#
cdl_option CYGSEM_KERNEL_SCHED_ASR_DATA_GLOBAL {
    # This option is not active
    # The parent CYGSEM_KERNEL_SCHED_ASR_SUPPORT is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: true
    #     true (unknown) == 0
    #   --> 0
};

# <
# <
# Counters and clocks
# doc: redirect/counters-clocks-and-alarms.html
# The counter objects provided by the kernel provide an
# abstraction of the clock facility that is generally provided.
# Application code can associate alarms with counters, where an
# alarm is identified by the number of ticks until it triggers,
# the action to be taken on triggering, and whether or not the
# alarm should be repeated.
#
cdl_component CYGPKG_KERNEL_COUNTERS {
    # There is no associated value.
};

# >
# Provide real-time clock
# On all current target systems the kernel can provide a
# real-time clock. This clock serves two purposes. First it is
# necessary to support clock and alarm related functions.
# Second it is needed to implement timeslicing in some of the
# schedulers including the mlqueue scheduler. If the
# application does not require any of these facilities then it
# is possible to disable the real time clock support
# completely.
#
cdl_option CYGVAR_KERNEL_COUNTERS_CLOCK {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires: CYGIMP_KERNEL_INTERRUPTS_DSRS
    #     CYGIMP_KERNEL_INTERRUPTS_DSRS == 1
    #   --> 1

    # The following properties are affected by this value
    # component CYGSEM_KERNEL_SCHED_TIMESLICE
    #     Requires: CYGVAR_KERNEL_COUNTERS_CLOCK
    # component CYGPKG_KERNEL_COUNTERS_CLOCK_OVERRIDE
    #     Requires: CYGVAR_KERNEL_COUNTERS_CLOCK
    # option CYGVAR_KERNEL_COUNTERS_CLOCK_LATENCY
    #     Requires: CYGVAR_KERNEL_COUNTERS_CLOCK
    # option CYGFUN_KERNEL_THREADS_TIMER
    #     Requires: CYGVAR_KERNEL_COUNTERS_CLOCK
    # option CYGDBG_KERNEL_INSTRUMENT_CLOCK
    #     ActiveIf: CYGVAR_KERNEL_COUNTERS_CLOCK
    # option CYGDBG_KERNEL_INSTRUMENT_ALARM
    #     ActiveIf: CYGVAR_KERNEL_COUNTERS_CLOCK
};

# Override default clock settings
# The kernel has default settings for the clock interrupt
# frequency. These settings will vary from platform to
# platform, but typically there will be a 100 clock interrupts
# every second. It is possible to change this frequency, but
# it requires some knowledge of the target hardware.
#
cdl_component CYGPKG_KERNEL_COUNTERS_CLOCK_OVERRIDE {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires: CYGVAR_KERNEL_COUNTERS_CLOCK
    #     CYGVAR_KERNEL_COUNTERS_CLOCK == 1
    #   --> 1

    # The following properties are affected by this value
    # option CYGNUM_KERNEL_COUNTERS_RTC_RESOLUTION
    #     Calculated:  CYGPKG_KERNEL_COUNTERS_CLOCK_OVERRIDE ?                 "{CYGNUM_KERNEL_COUNTERS_CLOCK_OVERRIDE_NUMERATOR,     CYGNUM_KERNEL_COUNTERS_CLOCK_OVERRIDE_DENOMINATOR}"   : "{CYGNUM_HAL_RTC_NUMERATOR, CYGNUM_HAL_RTC_DENOMINATOR}"
    # option CYGNUM_KERNEL_COUNTERS_RTC_PERIOD
    #     Calculated:  CYGPKG_KERNEL_COUNTERS_CLOCK_OVERRIDE ?                 "CYGNUM_KERNEL_COUNTERS_CLOCK_OVERRIDE_PERIOD"         : "CYGNUM_HAL_RTC_PERIOD"
};

# >
# Clock hardware initialization value
# During system initialization this value is used to initialize
# the clock hardware. The exact meaning of the value and the
# range of legal values therefore depends on the target hardware,
# and the hardware documentation should be consulted for further
# details. In addition the clock resolution numerator and
# denominator values should be updated. Typical values for
# this option would be 150000 on the MN10300 stdeval1 board,
# 15625 on the tx39 jmr3904 board, and 20833 on the powerpc
# cogent board.
#
cdl_option CYGNUM_KERNEL_COUNTERS_CLOCK_OVERRIDE_PERIOD {
    # This option is not active
    # The parent CYGPKG_KERNEL_COUNTERS_CLOCK_OVERRIDE is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 9999
    # value_source default
    # Default value: 9999
    # Legal values: 1 to 0x7fffffff
};

# Clock resolution numerator
# If a non-default clock interrupt frequency is used then it
# is necessary to specify the clock resolution explicitly.
# This resolution involves two separate values, the numerator
# and the denominator. The result of dividing the numerator by
# the denominator should correspond to the number of
# nanoseconds between clock interrupts. For example a
# numerator of 1000000000 and a denominator of 100 means that
# there are 10000000 nanoseconds (or 10 milliseconds) between
# clock interrupts. Expressing the resolution as a fraction
# should minimize clock drift even for frequencies that cannot
# be expressed as a simple integer. For example a frequency of
# 60Hz corresponds to a clock resolution of 16666666.66...
# nanoseconds. This can be expressed accurately as 1000000000
# over 60.
#
cdl_option CYGNUM_KERNEL_COUNTERS_CLOCK_OVERRIDE_NUMERATOR {
    # This option is not active
    # The parent CYGPKG_KERNEL_COUNTERS_CLOCK_OVERRIDE is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 1000000000
    # value_source default
    # Default value: 1000000000
    # Legal values: 1 to 0x7fffffff
};

# Clock resolution denominator
# If a non-default clock interrupt frequency is used then it
# is necessary to specify the clock resolution explicitly.
# This resolution involves two separate values, the numerator
# and the denominator. The result of dividing the numerator by
# the denominator should correspond to the number of
# nanoseconds between clock interrupts. For example a
# numerator of 1000000000 and a denominator of 100 means that
# there are 10000000 nanoseconds (or 10 milliseconds) between
# clock interrupts. Expressing the resolution as a fraction
# should minimize clock drift even for frequencies that cannot
# be expressed as a simple integer. For example a frequency of
# 60Hz corresponds to a clock resolution of 16666666.66...
# nanoseconds. This can be expressed accurately as 1000000000
# over 60.
#
cdl_option CYGNUM_KERNEL_COUNTERS_CLOCK_OVERRIDE_DENOMINATOR {
    # This option is not active
    # The parent CYGPKG_KERNEL_COUNTERS_CLOCK_OVERRIDE is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 100
    # value_source default
    # Default value: 100
    # Legal values: 1 to 0x7fffffff
};

# <
#
cdl_interface CYGINT_KERNEL_COUNTERS {
    # Implemented by CYGIMP_KERNEL_COUNTERS_SINGLE_LIST, active, enabled
    # Implemented by CYGIMP_KERNEL_COUNTERS_MULTI_LIST, active, disabled
    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 1
    # Requires: 1 == CYGINT_KERNEL_COUNTERS
    #     CYGINT_KERNEL_COUNTERS == 1
    #   --> 1

    # The following properties are affected by this value
    # interface CYGINT_KERNEL_COUNTERS
    #     Requires: 1 == CYGINT_KERNEL_COUNTERS
};

# Implement counters using a single list
# There are two different implementations of the counter
# objects. The first implementation stores all alarms in a
# single linked list. The alternative implementation uses a
# table of linked lists. A single list is more efficient in
# terms of memory usage and is generally adequate when the
# application only makes use of a small number of alarms.
#
cdl_option CYGIMP_KERNEL_COUNTERS_SINGLE_LIST {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Implement counters using a table of lists
# There are two different implementations of the counter
# objects. The first implementation stores all alarms in a
# single linked list. The alternative implementation uses a
# table of linked lists, with the size of the table being a
# separate configurable option. For more complicated
# operations it is better to have a table of lists since this
# reduces the amount of computation whenever the timer goes
# off. Assuming a table size of 8 (the default value) on
# average the timer code will only need to check 1/8 of the
# pending alarms instead of all of them.
#
cdl_component CYGIMP_KERNEL_COUNTERS_MULTI_LIST {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# >
# Size of counter list table
# If counters are implemented using an array of linked lists
# then this option controls the size of the array. A larger
# size reduces the amount of computation that needs to take
# place whenever the timer goes off, but requires extra
# memory.
#
cdl_option CYGNUM_KERNEL_COUNTERS_MULTI_LIST_SIZE {
    # This option is not active
    # The parent CYGIMP_KERNEL_COUNTERS_MULTI_LIST is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 8
    # value_source default
    # Default value: 8
    # Legal values: 1 to 1024
};

# <
# Sort the counter list
# Sorting the counter lists reduces the amount of work that
# has to be done when a counter tick is processed, since the
# next alarm to expire is always at the front of the list.
# However, it makes adding an alarm to the list more expensive
# since a search must be done for the correct place to put it.
# Many alarms are used to implement timeouts, which seldom trigger,
# so it is worthwhile optimizing this case. For this reason
# sorted list are disabled by default.
#
cdl_option CYGIMP_KERNEL_COUNTERS_SORT_LIST {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Measure real-time [clock] interrupt latency
# Measure the interrupt latency as seen by the real-time clock
# timer interrupt.  This requires hardware support, defined by
# the HAL_CLOCK_LATENCY() macro.
#
cdl_option CYGVAR_KERNEL_COUNTERS_CLOCK_LATENCY {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires: CYGVAR_KERNEL_COUNTERS_CLOCK
    #     CYGVAR_KERNEL_COUNTERS_CLOCK == 1
    #   --> 1

    # The following properties are affected by this value
    # option CYGVAR_KERNEL_COUNTERS_CLOCK_DSR_LATENCY
    #     Requires: CYGVAR_KERNEL_COUNTERS_CLOCK_LATENCY
    # option CYGVAR_KERNEL_COUNTERS_CLOCK_DSR_LATENCY
    #     DefaultValue: CYGVAR_KERNEL_COUNTERS_CLOCK_LATENCY
};

# Measure real-time [clock] DSR latency
# Measure the DSR latency as seen by the real-time clock
# timer interrupt.  This requires hardware support, defined by
# the HAL_CLOCK_LATENCY() macro.
#
cdl_option CYGVAR_KERNEL_COUNTERS_CLOCK_DSR_LATENCY {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: CYGVAR_KERNEL_COUNTERS_CLOCK_LATENCY
    #     CYGVAR_KERNEL_COUNTERS_CLOCK_LATENCY == 0
    #   --> 0
    # Requires: CYGVAR_KERNEL_COUNTERS_CLOCK_LATENCY
    #     CYGVAR_KERNEL_COUNTERS_CLOCK_LATENCY == 0
    #   --> 0
};

# RTC resolution
# This option automatically defines the tuple which is used to
# initialize the RTC resolution, consisting of a numerator and
# denominator.  For more information, see the option to 
# override default clock settings
# (CYGPKG_KERNEL_COUNTERS_CLOCK_OVERRIDE) and associated options.
#
cdl_option CYGNUM_KERNEL_COUNTERS_RTC_RESOLUTION {
    # Calculated value:  CYGPKG_KERNEL_COUNTERS_CLOCK_OVERRIDE ?                 "{CYGNUM_KERNEL_COUNTERS_CLOCK_OVERRIDE_NUMERATOR,     CYGNUM_KERNEL_COUNTERS_CLOCK_OVERRIDE_DENOMINATOR}"   : "{CYGNUM_HAL_RTC_NUMERATOR, CYGNUM_HAL_RTC_DENOMINATOR}"
    #     CYGPKG_KERNEL_COUNTERS_CLOCK_OVERRIDE == 0
    # Flavor: data
    # Current_value: {CYGNUM_HAL_RTC_NUMERATOR, CYGNUM_HAL_RTC_DENOMINATOR}
};

# RTC period
# This option automatically defines the RTC period to be used in
# setting the system clock hardware.  For more information, see the
# option to override default clock settings
# (CYGPKG_KERNEL_COUNTERS_CLOCK_OVERRIDE) and associated options.
#
cdl_option CYGNUM_KERNEL_COUNTERS_RTC_PERIOD {
    # Calculated value:  CYGPKG_KERNEL_COUNTERS_CLOCK_OVERRIDE ?                 "CYGNUM_KERNEL_COUNTERS_CLOCK_OVERRIDE_PERIOD"         : "CYGNUM_HAL_RTC_PERIOD"
    #     CYGPKG_KERNEL_COUNTERS_CLOCK_OVERRIDE == 0
    # Flavor: data
    # Current_value: CYGNUM_HAL_RTC_PERIOD
};

# <
# Thread-related options
# doc: redirect/thread-operations.html
# There are a number of configuration options related to the
# implementation of threads, for example whether or not the
# eCos kernel supports per-thread data.
#
cdl_component CYGPKG_KERNEL_THREADS {
    # There is no associated value.

    # The following properties are affected by this value
    # option CYGDBG_KERNEL_INSTRUMENT_THREAD
    #     ActiveIf: CYGPKG_KERNEL_THREADS
};

# >
# Allow per-thread timers
# This option controls whether or not the kernel should support
# per-thread clock and alarm related functions. Also some of
# the synchronization primitives such as semaphore and
# condition variable timed wait operations require per-thread
# timer support. If none of these facilities are required then
# the option can be disabled.
#
cdl_option CYGFUN_KERNEL_THREADS_TIMER {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires: CYGVAR_KERNEL_COUNTERS_CLOCK
    #     CYGVAR_KERNEL_COUNTERS_CLOCK == 1
    #   --> 1

    # The following properties are affected by this value
    # option CYGMFN_KERNEL_SYNCH_CONDVAR_TIMED_WAIT
    #     Requires: CYGFUN_KERNEL_THREADS_TIMER
};

# Support optional name for each thread
# Threads may optionally be supplied with a name string that is
# used to identify them during debugging. This name is only
# present if `this option is defined. Disabling it reduces both
# code and data size.
#
cdl_option CYGVAR_KERNEL_THREADS_NAME {
    # Flavor: bool
    user_value 0
    # value_source user
    # Default value: 1
};

# Keep track of all threads using a linked list
# Threads may optionally be placed on a housekeeping list so
# that all threads may be located easily. This is useful mainly
# in conjunction with source-level debugging.
#
cdl_option CYGVAR_KERNEL_THREADS_LIST {
    # Flavor: bool
    user_value 0
    # value_source user
    # Default value: 1

    # The following properties are affected by this value
    # option CYGFUN_KERNEL_ALL_THREADS_STACK_CHECKING
    #     Requires: CYGVAR_KERNEL_THREADS_LIST
    # option CYGDBG_KERNEL_DEBUG_GDB_THREAD_SUPPORT
    #     Requires: CYGVAR_KERNEL_THREADS_LIST
};

# Keep track of the base of each thread's stack
# This option makes the kernel keep track of the lower limit on
# each thread's stack. It allows the kernel to adjust the lower
# limit, thus making space for per-thread data. Note that it
# does not imply any form of run-time stack overflow checking.
#
cdl_option CYGFUN_KERNEL_THREADS_STACK_LIMIT {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # component CYGVAR_KERNEL_THREADS_DATA
    #     Requires: CYGFUN_KERNEL_THREADS_STACK_LIMIT
};

# Check thread stacks for overflows
# This option enables a variety of checks for stack overflow
# including signatures at the top and base of thread stacks,
# which are asserted for correctness whenever a thread switches.
#
cdl_component CYGFUN_KERNEL_THREADS_STACK_CHECKING {
    # This option is not active
    # ActiveIf constraint: CYGPKG_INFRA_DEBUG
    #     CYGPKG_INFRA_DEBUG == 0
    #   --> 0
    # ActiveIf constraint: CYGDBG_USE_ASSERTS
    #     CYGDBG_USE_ASSERTS == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# >
# Check all threads whenever possible
# This option enables more active checking of all threads for
# wrongdoing.  In theory, checking threads other than the old and new
# executing threads in a thread-switch is pointless, because no other
# thread has run, so no other stack can be exceeded.  But errors such
# as memory scribbling, dangling pointers, overlapping use of store
# or errors accessing objects adjacent to a stack which can be very
# hard to find can be detected this way, saving debug time.
#
cdl_option CYGFUN_KERNEL_ALL_THREADS_STACK_CHECKING {
    # This option is not active
    # The parent CYGFUN_KERNEL_THREADS_STACK_CHECKING is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires: CYGVAR_KERNEL_THREADS_LIST
    #     CYGVAR_KERNEL_THREADS_LIST == 0
    #   --> 0
};

# Signature size in bytes, at stack top and bottom
# This is the size of the area reserved for a signature at the top
# and bottom of all stacks.  It also provides a buffer zone for
# detecting overflow before external objects are corrupted, hence the
# ability to vary it here.  But if you are short of stack, increasing
# this value will make the overflow more, not less likely, of course.
#
cdl_option CYGNUM_KERNEL_THREADS_STACK_CHECK_DATA_SIZE {
    # This option is not active
    # The parent CYGFUN_KERNEL_THREADS_STACK_CHECKING is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 32
    # value_source default
    # Default value: 32
    # Legal values: 8 to 512
};

# <
# Measure stack usage
# This option allows measurement of each thread's stack by initializing
# it to a predefined value at thread creation time. Later use of the
# cyg_thread_measure_stack_usage() function allows the maximum stack
# usage of the thread so far to be obtained. Note that this is not
# necessarily the true maximum stack usage that the thread will ever
# use since all that has been measured is the stack usage corresponding
# to the code path followed this time, and not the code path that may
# be followed in future.
#
cdl_component CYGFUN_KERNEL_THREADS_STACK_MEASUREMENT {
    # Flavor: bool
    user_value 1
    # value_source user
    # Default value:  0 != CYGPKG_INFRA_DEBUG 
    #     CYGPKG_INFRA_DEBUG == 0
    #   --> 0
};

# >
# Output stack usage on thread exit
# This will output the measured stack usage on the diagnostic
# output when a thread exits.
#
cdl_option CYGDBG_KERNEL_THREADS_STACK_MEASUREMENT_VERBOSE_EXIT {
    # Flavor: bool
    user_value 1
    # value_source user
    # Default value: 0
};

# <
# Support for per-thread data
# It is possible for the kernel to support per-thread data, in
# other words an area of memory specific to each thread which
# can be used to store data for that thread. This per-thread
# data can be used by applications or by other packages such as
# the ISO C library.
#
cdl_component CYGVAR_KERNEL_THREADS_DATA {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires: CYGFUN_KERNEL_THREADS_STACK_LIMIT
    #     CYGFUN_KERNEL_THREADS_STACK_LIMIT == 1
    #   --> 1

    # The following properties are affected by this value
    # option CYGSEM_ERROR_PER_THREAD_ERRNO
    #     Requires: CYGVAR_KERNEL_THREADS_DATA
};

# >
# Number of words of per-thread data
# It is possible for the kernel to support per-thread data, in
# other words an area of memory specific to each thread which
# can be used to store data for that thread. This per-thread
# data can be used by applications or by other packages such as
# the ISO C library. This configuration option controls the
# number of words of per-thread data that the kernel will
# allow.
#
cdl_option CYGNUM_KERNEL_THREADS_DATA_MAX {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 6
    # value_source default
    # Default value: 6
    # Legal values: 4 to 65535
};

# Bitmap of preallocated slots of thread data
# Per thread data options. Per thread data support is based loosely
# on that defined by POSIX. Each thread has an array of slots, up to
# CYGNUM_KERNEL_THREADS_DATA_MAX, that may contain data. Some of the
# slots have been preallocated to specific packages. Others may be
# allocated dynamically.
#
cdl_component CYGNUM_KERNEL_THREADS_DATA_ALL {
    # Calculated value: 15
    # Flavor: data
    # Current_value: 15
};

# >
# Slot 0 preallocated for the kernel
# This option defines the index of a per-thread data
# slot which is reserved by
# the eCos kernel
# for private use.
#
cdl_option CYGNUM_KERNEL_THREADS_DATA_KERNEL {
    # Calculated value: 0
    # Flavor: data
    # Current_value: 0
};

# Slot 1 preallocated for uITRON
# This option defines the index of a per-thread data
# slot which is reserved by
# the uITRON compatibility layer
# for private use.
#
cdl_option CYGNUM_KERNEL_THREADS_DATA_ITRON {
    # Calculated value: 1
    # Flavor: data
    # Current_value: 1
};

# Slot 2 preallocated for errno
# This option defines the index of a per-thread data
# slot which is reserved for use by an errno variable.
#
cdl_option CYGNUM_KERNEL_THREADS_DATA_ERRNO {
    # Calculated value: 2
    # Flavor: data
    # Current_value: 2
};

# Slot 3 preallocated for POSIX
# This option defines the index of a per-thread data
# slot which is reserved by
# POSIX
# for private use.
#
cdl_option CYGNUM_KERNEL_THREADS_DATA_POSIX {
    # Calculated value: 3
    # Flavor: data
    # Current_value: 3
};

# <
# <
# Stack size for the idle thread
# This configuration option specifies the stack size in bytes
# for the idle thread. Unless the HAL is configured to use a
# separate interrupt stack this size must be sufficient to meet
# the requirements of all interrupt handlers - these
# requirements are cumulative if nested interrupted are
# enabled. Depending on the target architecture, the stack size
# typically has to be a multiple of eight or sixteen bytes.
# This will be overridden where it is used if the
# architectural HAL requires a minimum stack size
# to handle interrupts correctly.
#
cdl_option CYGNUM_KERNEL_THREADS_IDLE_STACK_SIZE {
    # Flavor: data
    user_value 512
    # value_source user
    # Default value: 2048
    # Legal values: 512 to 65536
};

# Maximal suspend count
# This option provides for an assertion that the count value for
# counted thread suspends do not exceed set limits.  This is to help
# with debugging, to allow a runaaway loop, for example, to be
# detected more easily.
# If the option is not defined, no assert is included.  Whether asserts
# are themselves included depends on infrastructure configury in
# infra.h
#
cdl_option CYGNUM_KERNEL_MAX_SUSPEND_COUNT_ASSERT {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 500
    # value_source default
    # Default value: 500
};

# Maximal wake count
# This option provides for an assertion that the count value for
# counted thread wakeups do not exceed set limits.  This is to
# help with debugging, to allow a runaaway loop, for example, to
# be detected more easily.
# If the option is not defined, no assert is included.  Whether asserts
# are themselves included depends on infrastructure configury in
# infra.h
#
cdl_option CYGNUM_KERNEL_MAX_COUNTED_WAKE_COUNT_ASSERT {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 500
    # value_source default
    # Default value: 500
};

# Idle thread must always yield
# If the scheduler configuration only has a single priority
# level, then the idle thread must yield each time around its loop.
#
cdl_option CYGIMP_IDLE_THREAD_YIELD {
    # This option is not active
    # ActiveIf constraint: (CYGNUM_KERNEL_SCHED_PRIORITIES == 1)
    #     CYGNUM_KERNEL_SCHED_PRIORITIES == 32
    #   --> 0

    # Calculated value: 1
    # Flavor: bool
    # Current value: 1
};

# <
# Synchronization primitives
# doc: redirect/thread-synchronization.html
# The eCos kernel supports a number of different
# synchronization primitives such as mutexes, semaphores,
# condition variables, and message boxes. There are
# configuration options to control the exact behaviour of some
# of these synchronization primitives.
#
cdl_component CYGPKG_KERNEL_SYNCH {
    # There is no associated value.

    # The following properties are affected by this value
    # option CYGDBG_KERNEL_INSTRUMENT_MUTEX
    #     ActiveIf: CYGPKG_KERNEL_SYNCH
    # option CYGDBG_KERNEL_INSTRUMENT_CONDVAR
    #     ActiveIf: CYGPKG_KERNEL_SYNCH
    # option CYGDBG_KERNEL_INSTRUMENT_BINSEM
    #     ActiveIf: CYGPKG_KERNEL_SYNCH
    # option CYGDBG_KERNEL_INSTRUMENT_CNTSEM
    #     ActiveIf: CYGPKG_KERNEL_SYNCH
    # option CYGDBG_KERNEL_INSTRUMENT_MBOXT
    #     ActiveIf: CYGPKG_KERNEL_SYNCH
};

# >
# Priority inversion protection protocols
# This component controls the protocols used to protect mutexes against
# priority inversion. If this option is enabled it defines which
# algorithm is used to implement this protection. At present only
# one such algorithm is defined: "SIMPLE". The implementation
# will only work in the mlqueue scheduler, and it does not handle the
# rare case of nested mutexes completely correctly. However it is
# both fast and deterministic.
#
cdl_component CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL {
    # This option is not active
    # ActiveIf constraint:  CYGSEM_KERNEL_SCHED_MLQUEUE 
    #     CYGSEM_KERNEL_SCHED_MLQUEUE == 0
    #   --> 0

    # Flavor: booldata
    # No user value, uncomment the following line to provide one.
    # user_value 1 SIMPLE
    # value_source default
    # Default value: 1 SIMPLE
    # Legal values:  "SIMPLE" 
    # Requires:  CYGINT_KERNEL_SCHEDULER_UNIQUE_PRIORITIES == 0 
    #     CYGINT_KERNEL_SCHEDULER_UNIQUE_PRIORITIES == 1
    #   --> 0
};

# >
# Enable priority inheritance protocol
# This option enables priority inheritance protocol. This protocol
# causes the owner of a mutex to be executed at the highest priority
# of the threads waiting for access to the mutex.
#
cdl_option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_INHERIT {
    # This option is not active
    # The parent CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DEFAULT
    #     DefaultValue:  CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_INHERIT ?
    #                             "INHERIT" :
    #                             CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_CEILING ?
    #                             "CEILING" : "NONE" 
};

# Enable priority ceiling protocol
# This option enables priority ceiling protocol. This protocol
# causes the owner of a mutex to be executed at a  priority
# associated with the mutex.
#
cdl_option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_CEILING {
    # This option is not active
    # The parent CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DEFAULT
    #     DefaultValue:  CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_INHERIT ?
    #                             "INHERIT" :
    #                             CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_CEILING ?
    #                             "CEILING" : "NONE" 
};

# No priority inversion protocol
# This option enables the ability to have no priority inversion protocol.
# It is equivalent to disabling the priority inversion protocol at
# the top level, but is necessary for the runtime and default
# selection options.
#
cdl_option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_NONE {
    # This option is not active
    # The parent CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL is not active

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Default priority inversion protocol
# This option defines the default inversion protocol used for mutexes that
# are created without an explicit protocol being specified. The protocol
# chosen by default is to use priority inheritance if it is present otherwise
# priority ceiling, or none if neither is present.
#
cdl_option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DEFAULT {
    # This option is not active
    # The parent CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL is not active

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value NONE
    # value_source default
    # Default value:  CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_INHERIT ?
    #                             "INHERIT" :
    #                             CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_CEILING ?
    #                             "CEILING" : "NONE" 
    #     CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_INHERIT == 0
    #     CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_CEILING == 0
    #   --> NONE
    # Legal values:  "INHERIT" "CEILING" "NONE" 

    # The following properties are affected by this value
    # option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DEFAULT_PRIORITY
    #     ActiveIf:  CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DEFAULT == "CEILING" 
};

# Default priority ceiling
# This option defines the default priority ceiling to be
# used if the chosen default priority inversion protocol is
# priority ceiling protocol. The default value for this is zero,
# making all such mutexes boost threads to the maximum priority.
#
cdl_option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DEFAULT_PRIORITY {
    # This option is not active
    # The parent CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL is not active
    # ActiveIf constraint:  CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DEFAULT == "CEILING" 
    #     CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DEFAULT == 0
    #   --> 0

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Legal values: 0 to  CYGNUM_KERNEL_SCHED_PRIORITIES - 1 
    #     CYGNUM_KERNEL_SCHED_PRIORITIES == 32
};

# Specify mutex priority inversion protocol at runtime
# This option controls whether the priority inversion protocol used by
# a mutex can be specified when that mutex is created.
#
cdl_option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DYNAMIC {
    # This option is not active
    # The parent CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL is not active
    # ActiveIf constraint:  CYGINT_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_COUNT > 1 
    #     CYGINT_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_COUNT == 0
    #   --> 0

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Number of protocols selected
#
cdl_interface CYGINT_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_COUNT {
    # Implemented by CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_INHERIT, inactive, enabled
    # Implemented by CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_CEILING, inactive, enabled
    # Implemented by CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_NONE, inactive, enabled
    # This option is not active
    # The parent CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL is not active

    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0

    # The following properties are affected by this value
    # option CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DYNAMIC
    #     ActiveIf:  CYGINT_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_COUNT > 1 
};

# <
# Message box blocking put support
# Message boxes can support three different versions of the
# put-message operation. The first is tryput(), which will fail
# if the message box is already full. The other two are the
# ordinary put() function which will block if the message box
# is full, and a timed put() operation which will block for
# upto a certain length of time if the message box is currently
# full. The blocking versions require extra memory in the
# message box data structure and extra code in the other
# message box functions, so they can be disabled if the
# application does not require them. If this option is enabled
# then the system will always provide the blocking put()
# function, and it will also provide the timed put() function
# if thread timers are enabled.
#
cdl_option CYGMFN_KERNEL_SYNCH_MBOXT_PUT_CAN_WAIT {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Message box queue size
# This configuration option controls the number of messages
# that can be queued in a message box before a non-blocking
# put() operation will fail or a blocking put() operation will
# block. The cost in memory is one pointer per message box for
# each possible message.
#
cdl_option CYGNUM_KERNEL_SYNCH_MBOX_QUEUE_SIZE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 10
    # value_source default
    # Default value: 10
    # Legal values: 1 to 65535
};

# Condition variable timed-wait support
# This option enables the condition variable timed wait
# facility.
#
cdl_option CYGMFN_KERNEL_SYNCH_CONDVAR_TIMED_WAIT {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires: CYGFUN_KERNEL_THREADS_TIMER
    #     CYGFUN_KERNEL_THREADS_TIMER == 1
    #   --> 1
};

# Condition variable explicit mutex wait support
# This option enables the condition variable explicit mutex wait
# facility. By default condition variables in eCos are created with
# a statically associated mutex. This option permits wait (and timed wait
# if CYGMFN_KERNEL_SYNCH_CONDVAR_TIMED_WAIT is enabled) to provide a
# different mutex as an argument. This makes no difference to the semantics
# the wait operation except that a different mutex will be used during it.
#
cdl_option CYGMFN_KERNEL_SYNCH_CONDVAR_WAIT_MUTEX {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# Kernel instrumentation
# The current release of the kernel contains an initial version
# of instrumentation support. The various parts of the kernel
# will invoke instrumentation routines whenever appropriate
# events occur, and these will be stored in a circular buffer
# for later reference.
#
cdl_component CYGPKG_KERNEL_INSTRUMENT {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# >
# Use buffer provided by the application
# In most circumstances the kernel should provide the
# instrumentation circular buffer itself. Occasionally
# application code may wish to provide the buffer instead,
# giving the application code more convenient access to the
# buffer. This also makes it possible to put the circular
# buffer in special areas of memory, for example a region that
# is shared with the host.
#
cdl_option CYGVAR_KERNEL_INSTRUMENT_EXTERNAL_BUFFER {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Size of instrumentation buffer size
# If kernel instrumentation is enabled then the instrumentation
# data goes into a circular buffer. A larger buffer allows
# more data to be stored, but at a significant cost in memory.
# The value of this option corresponds to the number of entries
# in the table, and typically each entry will require 16 bytes
# of memory.
#
cdl_option CYGNUM_KERNEL_INSTRUMENT_BUFFER_SIZE {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 256
    # value_source default
    # Default value: 256
    # Legal values: 16 to 0x100000
};

# Wrap instrument buffer
# When the instrumentation buffer is full it can either be restarted
# from the beginning, overwriting older data, or it can stop at the
# end. The former is useful if you want to look at the last entries
# made while the latter is useful if you want to look at the first
# few.
#
cdl_option CYGNUM_KERNEL_INSTRUMENT_BUFFER_WRAP {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Perform selective instrumentation
# The kernel can either collect all instrumentation events, or
# it can filter out events at runtime based on a set of flags.
# For example it would be possible to decide at runtime that
# only scheduler and interrupt instrumentation flags are of
# interest and that all other flags should be ignored. This
# flag mechanism involves extra code and processor cycle
# overhead in the instrumentation code, so it can be disabled
# if the application developer is interested in all
# instrumentation events.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_FLAGS {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Instrument the scheduler
# It is possible to perform selective instrumentation at
# run-time. It is also possible to disable instrumentation
# in various kernel components at compile-time, thus
# reducing the code size overheads. This option controls
# whether or not instrumentation support is compiled into
# the scheduling code.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_SCHED {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled
    # ActiveIf constraint: CYGPKG_KERNEL_SCHED
    #     CYGPKG_KERNEL_SCHED == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Instrument thread operations
# It is possible to perform selective instrumentation at
# run-time. It is also possible to disable instrumentation
# in various kernel components at compile-time, thus
# reducing the code size overheads. This option controls
# whether or not instrumentation support is compiled into
# the code that manipulates threads.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_THREAD {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled
    # ActiveIf constraint: CYGPKG_KERNEL_THREADS
    #     CYGPKG_KERNEL_THREADS == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Instrument interrupts
# It is possible to perform selective instrumentation at
# run-time. It is also possible to disable instrumentation
# in various kernel components at compile-time, thus
# reducing the code size overheads. This option controls
# whether or not instrumentation support is compiled into
# the interrupt handling code.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_INTR {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled
    # ActiveIf constraint: CYGPKG_KERNEL_INTERRUPTS
    #     CYGPKG_KERNEL_INTERRUPTS == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Instrument mutex operations
# It is possible to perform selective instrumentation at
# run-time. It is also possible to disable instrumentation
# in various kernel components at compile-time, thus
# reducing the code size overheads. This option controls
# whether or not instrumentation support is compiled into
# the mutex code.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_MUTEX {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled
    # ActiveIf constraint: CYGPKG_KERNEL_SYNCH
    #     CYGPKG_KERNEL_SYNCH == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Instrument condition variable operations
# It is possible to perform selective instrumentation at
# run-time. It is also possible to disable instrumentation
# in various kernel components at compile-time, thus
# reducing the code size overheads. This option controls
# whether or not instrumentation support is compiled into
# the condition variable code.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_CONDVAR {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled
    # ActiveIf constraint: CYGPKG_KERNEL_SYNCH
    #     CYGPKG_KERNEL_SYNCH == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Instrument binary semaphore operations
# It is possible to perform selective instrumentation at
# run-time. It is also possible to disable instrumentation
# in various kernel components at compile-time, thus
# reducing the code size overheads. This option controls
# whether or not instrumentation support is compiled into
# the binary semaphore code.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_BINSEM {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled
    # ActiveIf constraint: CYGPKG_KERNEL_SYNCH
    #     CYGPKG_KERNEL_SYNCH == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Instrument counting semaphore operations
# It is possible to perform selective instrumentation at
# run-time. It is also possible to disable instrumentation
# in various kernel components at compile-time, thus
# reducing the code size overheads. This option controls
# whether or not instrumentation support is compiled into
# the counting semaphore code.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_CNTSEM {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled
    # ActiveIf constraint: CYGPKG_KERNEL_SYNCH
    #     CYGPKG_KERNEL_SYNCH == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Instrument message box operations
# It is possible to perform selective instrumentation at
# run-time. It is also possible to disable instrumentation
# in various kernel components at compile-time, thus
# reducing the code size overheads. This option controls
# whether or not instrumentation support is compiled into
# the message box code.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_MBOXT {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled
    # ActiveIf constraint: CYGPKG_KERNEL_SYNCH
    #     CYGPKG_KERNEL_SYNCH == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Instrument clock operations
# It is possible to perform selective instrumentation at
# run-time. It is also possible to disable instrumentation
# in various kernel components at compile-time, thus
# reducing the code size overheads. This option controls
# whether or not instrumentation support is compiled into
# the real-time clock code.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_CLOCK {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled
    # ActiveIf constraint: CYGVAR_KERNEL_COUNTERS_CLOCK
    #     CYGVAR_KERNEL_COUNTERS_CLOCK == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Instrument alarm-related operations
# It is possible to perform selective instrumentation at
# run-time. It is also possible to disable instrumentation
# in various kernel components at compile-time, thus
# reducing the code size overheads. This option controls
# whether or not instrumentation support is compiled into
# the code related to alarm operations.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_ALARM {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled
    # ActiveIf constraint: CYGVAR_KERNEL_COUNTERS_CLOCK
    #     CYGVAR_KERNEL_COUNTERS_CLOCK == 1
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Support application-level instrumentation
# It is possible to perform selective instrumentation at
# run-time. It is also possible to disable instrumentation
# in various kernel components at compile-time, thus
# reducing the code size overheads. This option controls
# whether or not application-level instrumentation gets
# compiled in.
#
cdl_option CYGDBG_KERNEL_INSTRUMENT_USER {
    # This option is not active
    # The parent CYGPKG_KERNEL_INSTRUMENT is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# <
# Source-level debugging support
# If the source level debugger gdb is to be used for debugging
# application code then it may be necessary to configure in support
# for this in the kernel.
#
cdl_component CYGPKG_KERNEL_DEBUG {
    # There is no associated value.
};

# >
# Include GDB multi-threading debug support
# This option enables some extra kernel code which is needed
# to support multi-threaded source level debugging.
#
cdl_option CYGDBG_KERNEL_DEBUG_GDB_THREAD_SUPPORT {
    # Flavor: bool
    user_value 0
    # value_source user
    # Default value: 1
    # Requires: CYGVAR_KERNEL_THREADS_LIST
    #     CYGVAR_KERNEL_THREADS_LIST == 0
    #   --> 0
    # Requires: CYGDBG_HAL_DEBUG_GDB_THREAD_SUPPORT
    #     CYGDBG_HAL_DEBUG_GDB_THREAD_SUPPORT == 0
    #   --> 0

    # The following properties are affected by this value
    # option CYGDBG_HAL_DEBUG_GDB_THREAD_SUPPORT
    #     ActiveIf:  CYGSEM_HAL_ROM_MONITOR || CYGDBG_KERNEL_DEBUG_GDB_THREAD_SUPPORT 
};

# <
# Kernel APIs
# doc: redirect/kernel-apis.html
# The eCos kernel is implemented in C++, so a C++ interface
# to the kernel is always available. There is also an optional
# C API. Additional API's may be provided in future versions.
#
cdl_component CYGPKG_KERNEL_API {
    # There is no associated value.
};

# >
# Provide C API
# The eCos kernel is implemented in C++, but there is an
# optional C API for use by application code. This C API can be
# disabled if the application code does not invoke the kernel
# directly, but instead uses higher level code such as the
# uITRON compatibility layer.
#
cdl_option CYGFUN_KERNEL_API_C {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires: CYGPKG_MEMALLOC
    #     CYGPKG_MEMALLOC == current
    #   --> 1
    # Requires: CYGFUN_MEMALLOC_KAPI
    #     CYGFUN_MEMALLOC_KAPI == 1
    #   --> 1

    # The following properties are affected by this value
    # option CYGFUN_MEMALLOC_KAPI
    #     DefaultValue: CYGFUN_KERNEL_API_C
};

# <
# Kernel build options
# Package specific build options including control over
# compiler flags used only in building this package,
# and details of which tests are built.
#
cdl_component CYGPKG_KERNEL_OPTIONS {
    # There is no associated value.
};

# >
# Additional compiler flags
# This option modifies the set of compiler flags for
# building the eCos kernel. These flags are used in addition
# to the set of global flags.
#
cdl_option CYGPKG_KERNEL_CFLAGS_ADD {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# Suppressed compiler flags
# This option modifies the set of compiler flags for
# building the eCos kernel. These flags are removed from
# the set of global flags if present.
#
cdl_option CYGPKG_KERNEL_CFLAGS_REMOVE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# Kernel tests
# This option specifies the set of tests for the eCos kernel.
#
cdl_option CYGPKG_KERNEL_TESTS {
    # Calculated value:  
    #                     CYGPKG_HAL_ARM_AEB ? "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/clock0 tests/clock1 tests/clockcnv tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kclock0 tests/kclock1 tests/kexcept1 tests/kintr0 tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/ksched1 tests/ksem0 tests/ksem1 tests/kflag0 tests/kflag1 tests/klock tests/kthread0 tests/kthread1 tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2 tests/release tests/kill tests/thread_gdb tests/tm_basic tests/dhrystone" :  CYGPKG_HAL_ARM_EBSA285 ? "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/clock0 tests/clock1 tests/clockcnv tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kclock0 tests/kclock1 tests/kexcept1 tests/kintr0 tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/ksched1 tests/ksem0 tests/ksem1 tests/kflag0 tests/kflag1 tests/klock tests/kthread0 tests/kthread1 tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2 tests/release tests/kill tests/thread_gdb tests/tm_basic tests/dhrystone tests/stress_threads tests/kcache1 tests/kcache2" :  CYGPKG_HAL_ARM_SA11X0 ? "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/clock0 tests/clock1 tests/clockcnv tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kclock0 tests/kclock1 tests/kexcept1 tests/kintr0 tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/ksched1 tests/ksem0 tests/ksem1 tests/kflag0 tests/kflag1 tests/klock tests/kthread0 tests/kthread1 tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2 tests/release tests/kill tests/thread_gdb tests/tm_basic tests/dhrystone tests/stress_threads tests/kcache1 tests/kcache2" :  CYGPKG_HAL_ARM_EDB7XXX ? "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/clock0 tests/clock1 tests/clockcnv tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kclock0 tests/kclock1 tests/kexcept1 tests/kintr0 tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/ksched1 tests/ksem0 tests/ksem1 tests/kflag0 tests/kflag1 tests/klock tests/kthread0 tests/kthread1 tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2 tests/release tests/kill tests/thread_gdb tests/tm_basic tests/dhrystone tests/stress_threads tests/kcache1 tests/kcache2" :  CYGPKG_HAL_ARM_CMA230 ? "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/clock0 tests/clock1 tests/clockcnv tests/cnt_sem0 tests/cnt_sem1 tests/flag0 tests/flag1 tests/intr0 tests/kclock0 tests/kclock1 tests/kintr0 tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/ksched1 tests/ksem0 tests/ksem1 tests/kflag0 tests/kflag1 tests/klock tests/kthread0 tests/kthread1 tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2 tests/release tests/kill tests/thread_gdb tests/tm_basic tests/dhrystone" :  CYGPKG_HAL_ARM ? "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/clock0 tests/clock1 tests/clockcnv tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kclock0 tests/kclock1 tests/kexcept1 tests/kintr0 tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/ksched1 tests/ksem0 tests/ksem1 tests/kflag0 tests/kflag1 tests/klock tests/kthread0 tests/kthread1 tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2 tests/release tests/kill tests/thread_gdb tests/tm_basic tests/dhrystone" :  "tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/clock0 tests/clock1 tests/clockcnv tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kclock0 tests/kclock1 tests/kexcept1 tests/kintr0 tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/ksched1 tests/ksem0 tests/ksem1 tests/kflag0 tests/kflag1 tests/klock tests/kthread0 tests/kthread1 tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2 tests/release tests/kill tests/thread_gdb tests/tm_basic tests/dhrystone tests/stress_threads tests/kcache1 tests/kcache2" 
    #                 
    #     CYGPKG_HAL_ARM_AEB (unknown) == 0
    #     CYGPKG_HAL_ARM_EBSA285 (unknown) == 0
    #     CYGPKG_HAL_ARM_SA11X0 (unknown) == 0
    #     CYGPKG_HAL_ARM_EDB7XXX == current
    #     CYGPKG_HAL_ARM_CMA230 (unknown) == 0
    #     CYGPKG_HAL_ARM == current
    # Flavor: data
    # Current_value: tests/bin_sem0 tests/bin_sem1 tests/bin_sem2 tests/clock0 tests/clock1 tests/clockcnv tests/cnt_sem0 tests/cnt_sem1 tests/except1 tests/flag0 tests/flag1 tests/intr0 tests/kclock0 tests/kclock1 tests/kexcept1 tests/kintr0 tests/kmbox1 tests/kmutex0 tests/kmutex1 tests/ksched1 tests/ksem0 tests/ksem1 tests/kflag0 tests/kflag1 tests/klock tests/kthread0 tests/kthread1 tests/mbox1 tests/mqueue1 tests/mutex0 tests/mutex1 tests/mutex2 tests/mutex3 tests/sched1 tests/sync2 tests/sync3 tests/thread0 tests/thread1 tests/thread2 tests/release tests/kill tests/thread_gdb tests/tm_basic tests/dhrystone tests/stress_threads tests/kcache1 tests/kcache2
};

# <
# <
# Dynamic memory allocation
# This package provides memory allocator infrastructure required for
# dynamic memory allocators, including the ISO standard malloc
# interface. It also contains some sample implementations.
#
cdl_package CYGPKG_MEMALLOC {
    # Packages cannot be added or removed, nor can their version be changed,
    # simply by editing their value. Instead the appropriate configuration
    # should be used to perform these actions.

    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 current

    # The following properties are affected by this value
    # option CYGFUN_KERNEL_API_C
    #     Requires: CYGPKG_MEMALLOC
};

# >
# Memory allocator implementations
# This component contains configuration options related to the 
# various memory allocators available.
#
cdl_component CYGPKG_MEMALLOC_ALLOCATORS {
    # There is no associated value.
};

# >
# Fixed block allocator
# This component contains configuration options related to the 
# fixed block memory allocator.
#
cdl_component CYGPKG_MEMALLOC_ALLOCATOR_FIXED {
    # There is no associated value.
};

# >
# Make thread safe
# With this option enabled, this allocator will be
# made thread-safe. Additionally allocation functions
# are made available that allow a thread to wait
# until memory is available.
#
cdl_option CYGSEM_MEMALLOC_ALLOCATOR_FIXED_THREADAWARE {
    # ActiveIf constraint: CYGPKG_KERNEL
    #     CYGPKG_KERNEL == current
    #   --> 1

    # Flavor: bool
    user_value 0
    # value_source user
    # Default value: 1
};

# <
# Simple variable block allocator
# This component contains configuration options related to the 
# simple variable block memory allocator. This allocator is not
# very fast, and in particular does not scale well with large
# numbers of allocations. It is however very compact in terms of
# code size and does not have very much overhead per allocation.
#
cdl_component CYGPKG_MEMALLOC_ALLOCATOR_VARIABLE {
    # There is no associated value.
};

# >
# Make thread safe
# With this option enabled, this allocator will be
# made thread-safe. Additionally allocation functions
# are added that allow a thread to wait until memory
# are made available that allow a thread to wait
# until memory is available.
#
cdl_option CYGSEM_MEMALLOC_ALLOCATOR_VARIABLE_THREADAWARE {
    # ActiveIf constraint: CYGPKG_KERNEL
    #     CYGPKG_KERNEL == current
    #   --> 1

    # Flavor: bool
    user_value 0
    # value_source user
    # Default value: 1
};

# Coalesce memory
# The variable-block memory allocator can perform coalescing
# of memory whenever the application code releases memory back
# to the pool. This coalescing reduces the possibility of
# memory fragmentation problems, but involves extra code and
# processor cycles.
#
cdl_option CYGSEM_MEMALLOC_ALLOCATOR_VARIABLE_COALESCE {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1

    # The following properties are affected by this value
    # option CYGIMP_MEMALLOC_MALLOC_VARIABLE_SIMPLE
    #     Requires: CYGSEM_MEMALLOC_ALLOCATOR_VARIABLE_COALESCE
};

# <
# Doug Lea's malloc
# This component contains configuration options related to the 
# port of Doug Lea's memory allocator, normally known as
# dlmalloc. dlmalloc has a reputation for being both fast
# and space-conserving, as well as resisting fragmentation well.
# It is a common choice for a general purpose allocator and
# has been used in both newlib and Linux glibc.
#
cdl_component CYGPKG_MEMALLOC_ALLOCATOR_DLMALLOC {
    # There is no associated value.
};

# >
# Debug build
# Doug Lea's malloc implementation has substantial amounts
# of internal checking in order to verify the operation
# and consistency of the allocator. However this imposes
# substantial overhead on each operation. Therefore this
# checking may be individually disabled.
#
cdl_option CYGDBG_MEMALLOC_ALLOCATOR_DLMALLOC_DEBUG {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value:  0 != CYGDBG_USE_ASSERTS 
    #     CYGDBG_USE_ASSERTS == 0
    #   --> 0
    # Requires: CYGDBG_USE_ASSERTS
    #     CYGDBG_USE_ASSERTS == 0
    #   --> 0
};

# Make thread safe
# With this option enabled, this allocator will be
# made thread-safe. Additionally allocation functions
# are made available that allow a thread to wait
# until memory is available.
#
cdl_option CYGIMP_MEMALLOC_ALLOCATOR_DLMALLOC_THREADAWARE {
    # ActiveIf constraint: CYGPKG_KERNEL
    #     CYGPKG_KERNEL == current
    #   --> 1

    # Flavor: bool
    user_value 0
    # value_source user
    # Default value: 1
    # Requires: CYGPKG_KERNEL
    #     CYGPKG_KERNEL == current
    #   --> 1
};

# Support more than one instance
# Having this option disabled allows important
# implementation structures to be declared as a single
# static instance, allowing faster access. However this
# would fail if there is more than one instance of
# the dlmalloc allocator class. Therefore this option can
# be enabled if multiple instances are required. Note: as
# a special case, if this allocator is used as the
# implementation of malloc, and it can be determined there
# is more than one malloc pool, then this option will be
# silently enabled.
#
cdl_option CYGIMP_MEMALLOC_ALLOCATOR_DLMALLOC_SAFE_MULTIPLE {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
};

# Use system memcpy() and memset()
# This may be used to control whether memset() and memcpy()
# are used within the implementation. The alternative is
# to use some macro equivalents, which some people report
# are faster in some circumstances.
#
cdl_option CYGIMP_MEMALLOC_ALLOCATOR_DLMALLOC_USE_MEMCPY {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value:  0 != CYGPKG_ISOINFRA 
    #     CYGPKG_ISOINFRA (unknown) == 0
    #   --> 0
    # Requires: CYGPKG_ISOINFRA
    #     CYGPKG_ISOINFRA (unknown) == 0
    #   --> 0
};

# <
# <
# Kernel C API support for memory allocation
# This option must be enabled to provide the extensions required
# to support integration into the kernel C API.
#
cdl_option CYGFUN_MEMALLOC_KAPI {
    # ActiveIf constraint: CYGPKG_KERNEL
    #     CYGPKG_KERNEL == current
    #   --> 1

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: CYGFUN_KERNEL_API_C
    #     CYGFUN_KERNEL_API_C == 1
    #   --> 1

    # The following properties are affected by this value
    # option CYGFUN_KERNEL_API_C
    #     Requires: CYGFUN_MEMALLOC_KAPI
};

# malloc(0) returns NULL
# This option controls the behavior of malloc(0) ( or calloc with
# either argument 0 ). It is permitted by the standard to return
# either a NULL pointer or a unique pointer. Enabling this option
# forces a NULL pointer to be returned.
#
cdl_option CYGSEM_MEMALLOC_MALLOC_ZERO_RETURNS_NULL {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# malloc() and supporting allocators
# This component enables support for dynamic memory
# allocation as supplied by the functions malloc(),
# free(), calloc() and realloc(). As these
# functions are often used, but can have quite an
# overhead, disabling them here can ensure they
# cannot even be used accidentally when static
# allocation is preferred. Within this component are
# various allocators that can be selected for use
# as the underlying implementation of the dynamic
# allocation functions.
#
cdl_component CYGPKG_MEMALLOC_MALLOC_ALLOCATORS {
    # This option is not active
    # ActiveIf constraint: CYGPKG_ISOINFRA
    #     CYGPKG_ISOINFRA (unknown) == 0
    #   --> 0

    # Flavor: bool
    user_value 0
    # value_source user
    # Default value: 1
};

# >
# malloc() allocator implementations
#
cdl_interface CYGINT_MEMALLOC_MALLOC_ALLOCATORS {
    # Implemented by CYGIMP_MEMALLOC_MALLOC_VARIABLE_SIMPLE, inactive, disabled
    # Implemented by CYGIMP_MEMALLOC_MALLOC_DLMALLOC, inactive, enabled
    # This option is not active
    # The parent CYGPKG_MEMALLOC_MALLOC_ALLOCATORS is not active
    # The parent CYGPKG_MEMALLOC_MALLOC_ALLOCATORS is disabled

    # This value cannot be modified here.
    # Flavor: data
    # Current_value: 0
    # Requires:  CYGINT_MEMALLOC_MALLOC_ALLOCATORS == 1 
    #     CYGINT_MEMALLOC_MALLOC_ALLOCATORS == 0
    #   --> 0

    # The following properties are affected by this value
    # interface CYGINT_MEMALLOC_MALLOC_ALLOCATORS
    #     Requires:  CYGINT_MEMALLOC_MALLOC_ALLOCATORS == 1 
};

# malloc() implementation instantiation data
# Memory allocator implementations that are capable of being
# used underneath malloc() must be instantiated. The code
# to do this is set in this option. It is only intended to
# be set by the implementation, not the user.
#
cdl_option CYGBLD_MEMALLOC_MALLOC_IMPLEMENTATION_HEADER {
    # This option is not active
    # The parent CYGPKG_MEMALLOC_MALLOC_ALLOCATORS is not active
    # The parent CYGPKG_MEMALLOC_MALLOC_ALLOCATORS is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value <cyg/memalloc/dlmalloc.hxx>
    # value_source default
    # Default value: <cyg/memalloc/dlmalloc.hxx>

    # The following properties are affected by this value
    # option CYGIMP_MEMALLOC_MALLOC_VARIABLE_SIMPLE
    #     Requires:  CYGBLD_MEMALLOC_MALLOC_IMPLEMENTATION_HEADER ==  "<cyg/memalloc/memvar.hxx>" 
    # option CYGIMP_MEMALLOC_MALLOC_DLMALLOC
    #     Requires:  CYGBLD_MEMALLOC_MALLOC_IMPLEMENTATION_HEADER ==  "<cyg/memalloc/dlmalloc.hxx>" 
};

# Simple variable block implementation
# This causes malloc() to use the simple
# variable block allocator.
#
cdl_option CYGIMP_MEMALLOC_MALLOC_VARIABLE_SIMPLE {
    # This option is not active
    # The parent CYGPKG_MEMALLOC_MALLOC_ALLOCATORS is not active
    # The parent CYGPKG_MEMALLOC_MALLOC_ALLOCATORS is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Requires:  CYGBLD_MEMALLOC_MALLOC_IMPLEMENTATION_HEADER ==  "<cyg/memalloc/memvar.hxx>" 
    #     CYGBLD_MEMALLOC_MALLOC_IMPLEMENTATION_HEADER == 0
    #   --> 0
    # Requires: CYGSEM_MEMALLOC_ALLOCATOR_VARIABLE_COALESCE
    #     CYGSEM_MEMALLOC_ALLOCATOR_VARIABLE_COALESCE == 1
    #   --> 1
};

# Doug Lea's malloc implementation
# This causes malloc() to use a version of Doug Lea's
# malloc (dlmalloc) as the underlying implementation.
#
cdl_option CYGIMP_MEMALLOC_MALLOC_DLMALLOC {
    # This option is not active
    # The parent CYGPKG_MEMALLOC_MALLOC_ALLOCATORS is not active
    # The parent CYGPKG_MEMALLOC_MALLOC_ALLOCATORS is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires:  CYGBLD_MEMALLOC_MALLOC_IMPLEMENTATION_HEADER ==  "<cyg/memalloc/dlmalloc.hxx>" 
    #     CYGBLD_MEMALLOC_MALLOC_IMPLEMENTATION_HEADER == 0
    #   --> 0
};

# <
# Size of the fallback dynamic memory pool in bytes
# If *no* heaps are configured in your memory layout,
# dynamic memory allocation by
# malloc() and calloc() must be from a fixed-size,
# contiguous memory pool (note here that it is the
# pool that is of a fixed size, but malloc() is still
# able to allocate variable sized chunks of memory
# from it). This option is the size
# of that pool, in bytes. Note that not all of
# this is available for programs to
# use - some is needed for internal information
# about memory regions, and some may be lost to
# ensure that memory allocation only returns
# memory aligned on word (or double word)
# boundaries - a very common architecture
# constraint.
#
cdl_option CYGNUM_MEMALLOC_FALLBACK_MALLOC_POOL_SIZE {
    # Flavor: data
    user_value 32
    # value_source user
    # Default value: 16384
    # Legal values: 32 to 0x7fffffff
};

# Common memory allocator package build options
# Package specific build options including control over
# compiler flags used only in building this package,
# and details of which tests are built.
#
cdl_component CYGPKG_MEMALLOC_OPTIONS {
    # There is no associated value.
};

# >
# Additional compiler flags
# This option modifies the set of compiler flags for
# building this package. These flags are used in addition
# to the set of global flags.
#
cdl_option CYGPKG_MEMALLOC_CFLAGS_ADD {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# Suppressed compiler flags
# This option modifies the set of compiler flags for
# building this package. These flags are removed from
# the set of global flags if present.
#
cdl_option CYGPKG_MEMALLOC_CFLAGS_REMOVE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# Tests
# This option specifies the set of tests for this package.
#
cdl_option CYGPKG_MEMALLOC_TESTS {
    # Calculated value:  "tests/dlmalloc1 tests/dlmalloc2 tests/kmemfix1 tests/kmemvar1 tests/malloc1 tests/malloc2 tests/malloc3 tests/malloc4 tests/memfix1 tests/memfix2 tests/memvar1 tests/memvar2 tests/realloc" 
    # Flavor: data
    # Current_value: tests/dlmalloc1 tests/dlmalloc2 tests/kmemfix1 tests/kmemvar1 tests/malloc1 tests/malloc2 tests/malloc3 tests/malloc4 tests/memfix1 tests/memfix2 tests/memvar1 tests/memvar2 tests/realloc
};

# <
# <
# I/O sub-system
# doc: redirect/ecos-device-drivers.html
# The eCos system is supplied with a number of different
# device drivers.  This option enables the basic I/O system
# support which is the basis for all drivers.
#
cdl_package CYGPKG_IO {
    # Packages cannot be added or removed, nor can their version be changed,
    # simply by editing their value. Instead the appropriate configuration
    # should be used to perform these actions.

    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 current
    # Requires: CYGPKG_ERROR
    #     CYGPKG_ERROR == current
    #   --> 1
};

# >
# Debug I/O sub-system
# This option enables verbose messages to be displayed on the
# system 'diag' device during I/O system initialization.
#
cdl_option CYGDBG_IO_INIT {
    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
};

# Basic support for file based I/O
# This option control support for simple file I/O primitives. It is only
# present if the FILEIO package is not included.
#
cdl_component CYGPKG_IO_FILE_SUPPORT {
    # ActiveIf constraint: !CYGPKG_IO_FILEIO
    #     CYGPKG_IO_FILEIO (unknown) == 0
    #   --> 1

    # Flavor: bool
    user_value 0
    # value_source user
    # Default value: 1
};

# >
# Number of open files
# This option controls the number of open files.
#
cdl_option CYGPKG_IO_NFILE {
    # This option is not active
    # The parent CYGPKG_IO_FILE_SUPPORT is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 16
    # value_source default
    # Default value: 16
};

# <
# <
# Common error code support
# This package contains the common list of error and
# status codes. It is held centrally to allow
# packages to interchange error codes and status
# codes in a common way, rather than each package
# having its own conventions for error/status
# reporting. The error codes are modelled on the
# POSIX style naming e.g. EINVAL etc. This package
# also provides the standard strerror() function to
# convert error codes to textual representation, as
# well as an implementation of the errno idiom.
#
cdl_package CYGPKG_ERROR {
    # Packages cannot be added or removed, nor can their version be changed,
    # simply by editing their value. Instead the appropriate configuration
    # should be used to perform these actions.

    # This value cannot be modified here.
    # Flavor: booldata
    # Current value: 1 current
    # Requires:  CYGBLD_ISO_ERRNO_CODES_HEADER == "<cyg/error/codes.h>" 
    #     CYGBLD_ISO_ERRNO_CODES_HEADER (unknown) == 0
    #   --> 0

    # The following properties are affected by this value
    # package CYGPKG_IO_SERIAL_ARM_EDB7XXX
    #     Requires: CYGPKG_ERROR
    # package CYGPKG_IO
    #     Requires: CYGPKG_ERROR
};

# >
# errno variable
# This package controls the behaviour of the
# errno variable (or more strictly, expression)
# from <errno.h>.
#
cdl_component CYGPKG_ERROR_ERRNO {
    # Flavor: bool
    user_value 0
    # value_source user
    # Default value: 1
    # Requires:  CYGBLD_ISO_ERRNO_HEADER == "<cyg/error/errno.h>" 
    #     CYGBLD_ISO_ERRNO_HEADER (unknown) == 0
    #   --> 0
};

# >
# Per-thread errno
# This option controls whether the standard error
# code reporting variable errno is a per-thread
# variable, rather than global.
#
cdl_option CYGSEM_ERROR_PER_THREAD_ERRNO {
    # This option is not active
    # The parent CYGPKG_ERROR_ERRNO is disabled

    # Flavor: bool
    # No user value, uncomment the following line to provide one.
    # user_value 1
    # value_source default
    # Default value: 1
    # Requires: CYGVAR_KERNEL_THREADS_DATA
    #     CYGVAR_KERNEL_THREADS_DATA == 1
    #   --> 1
};

# Tracing level
# Trace verbosity level for debugging the errno
# retrieval mechanism in errno.cxx. Increase this
# value to get additional trace output.
#
cdl_option CYGNUM_ERROR_ERRNO_TRACE_LEVEL {
    # This option is not active
    # The parent CYGPKG_ERROR_ERRNO is disabled

    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value 0
    # value_source default
    # Default value: 0
    # Legal values: 0 to 1
};

# <
# strerror function
# This package controls the presence and behaviour of the
# strerror() function from <string.h>
#
cdl_option CYGPKG_ERROR_STRERROR {
    # Flavor: bool
    user_value 0
    # value_source user
    # Default value: 1
    # Requires:  CYGBLD_ISO_STRERROR_HEADER == "<cyg/error/strerror.h>" 
    #     CYGBLD_ISO_STRERROR_HEADER (unknown) == 0
    #   --> 0
};

# Error package build options
# Package specific build options including control over
# compiler flags used only in building this package,
# and details of which tests are built.
#
cdl_component CYGPKG_ERROR_OPTIONS {
    # There is no associated value.
};

# >
# Additional compiler flags
# This option modifies the set of compiler flags for
# building the error package. These flags are used in addition
# to the set of global flags.
#
cdl_option CYGPKG_ERROR_CFLAGS_ADD {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# Suppressed compiler flags
# This option modifies the set of compiler flags for
# building the error package. These flags are removed from
# the set of global flags if present.
#
cdl_option CYGPKG_ERROR_CFLAGS_REMOVE {
    # Flavor: data
    # No user value, uncomment the following line to provide one.
    # user_value ""
    # value_source default
    # Default value: ""
};

# <
# <
# <

